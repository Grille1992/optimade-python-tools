{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"OPTIMADE Python tools \u00b6 Latest release Build status Activity The aim of OPTIMADE is to develop a common API, compliant with the JSON API 1.0 specification. This is to enable interoperability among databases that contain calculated properties of existing and hypothetical materials. This repository contains a library of tools for implementing and consuming OPTIMADE APIs using Python. It also contains a server validator tool, which may be called from the shell or used as a GitHub Action from optimade-validator-action . Disclaimer : While the package supports elasticsearch-dsl v6 & v7 and django v2 & v3, all tests are performed with the latest supported version. If you experience any issues with the older versions, you are most welcome to contribute to the repository (see below under Contributing). Status \u00b6 Both the OPTIMADE specification and this repository are under development . The latest stable version can be obtained from PyPI pip install optimade or by cloning the master branch of this repository git clone git@github.com:Materials-Consortia/optimade-python-tools . Installation \u00b6 Installation instructions, for both the index meta-database, and for the main API can be found in INSTALL.md . Contributing \u00b6 Contribution guidelines and tips can be found in CONTRIBUTING.md . Links \u00b6 OPTIMADE Specification , the human-readable specification that this library is based on. optimade-validator-action , a GitHub action that can be used to validate implementations from a URL (using the validator from this repo). OpenAPI , the machine-readable format used to specify the OPTIMADE API in openapi.json . Interactive documentation generated from openapi.json (see also interactive JSON editor ). pydantic , the library used for generating the OpenAPI schema from Python models . FastAPI , the framework used for generating the reference implementation from the openapi.json specification. lark , the library used to parse the filter language in OPTIMADE queries.","title":"Home"},{"location":"#optimade-python-tools","text":"Latest release Build status Activity The aim of OPTIMADE is to develop a common API, compliant with the JSON API 1.0 specification. This is to enable interoperability among databases that contain calculated properties of existing and hypothetical materials. This repository contains a library of tools for implementing and consuming OPTIMADE APIs using Python. It also contains a server validator tool, which may be called from the shell or used as a GitHub Action from optimade-validator-action . Disclaimer : While the package supports elasticsearch-dsl v6 & v7 and django v2 & v3, all tests are performed with the latest supported version. If you experience any issues with the older versions, you are most welcome to contribute to the repository (see below under Contributing).","title":"OPTIMADE Python tools"},{"location":"#status","text":"Both the OPTIMADE specification and this repository are under development . The latest stable version can be obtained from PyPI pip install optimade or by cloning the master branch of this repository git clone git@github.com:Materials-Consortia/optimade-python-tools .","title":"Status"},{"location":"#installation","text":"Installation instructions, for both the index meta-database, and for the main API can be found in INSTALL.md .","title":"Installation"},{"location":"#contributing","text":"Contribution guidelines and tips can be found in CONTRIBUTING.md .","title":"Contributing"},{"location":"#links","text":"OPTIMADE Specification , the human-readable specification that this library is based on. optimade-validator-action , a GitHub action that can be used to validate implementations from a URL (using the validator from this repo). OpenAPI , the machine-readable format used to specify the OPTIMADE API in openapi.json . Interactive documentation generated from openapi.json (see also interactive JSON editor ). pydantic , the library used for generating the OpenAPI schema from Python models . FastAPI , the framework used for generating the reference implementation from the openapi.json specification. lark , the library used to parse the filter language in OPTIMADE queries.","title":"Links"},{"location":"reference/models/","text":"\u00b6 baseinfo \u00b6 AvailableApiVersion pydantic \u00b6 A JSON object containing information about an available API version url: AnyHttpUrl field pydantic required \u00b6 a string specifying a versioned base URL that MUST adhere to the rules in section Base URL version: ConstrainedStrValue field pydantic required \u00b6 a string containing the full version number of the API served at that versioned base URL. The version number string MUST NOT be prefixed by, e.g., 'v'. crosscheck_url_and_version ( values ) classmethod \u00b6 Check that URL version and API version are compatible. Source code in optimade/models/baseinfo.py 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 @root_validator ( pre = False , skip_on_failure = True ) def crosscheck_url_and_version ( cls , values ): \"\"\" Check that URL version and API version are compatible. \"\"\" url_version = ( values [ \"url\" ] . split ( \"/\" )[ - 2 if values [ \"url\" ] . endswith ( \"/\" ) else - 1 ] . replace ( \"v\" , \"\" ) ) url_version = tuple ( int ( val ) for val in url_version . split ( \".\" )) api_version = tuple ( int ( val ) for val in values [ \"version\" ] . split ( \".\" )) if any ( a != b for a , b in zip ( url_version , api_version )): raise ValueError ( f \"API version { api_version } is not compatible with url version { url_version } .\" ) return values url_must_be_versioned_base_url ( v ) classmethod \u00b6 The URL must be a valid versioned Base URL Source code in optimade/models/baseinfo.py 29 30 31 32 33 34 @validator ( \"url\" ) def url_must_be_versioned_base_url ( cls , v ): \"\"\"The URL must be a valid versioned Base URL\"\"\" if not re . match ( r \".+/v[0-1](\\.[0-9]+)*/?$\" , v ): raise ValueError ( f \"url MUST be a versioned base URL. It is: { v } \" ) return v BaseInfoAttributes pydantic \u00b6 Attributes for Base URL Info endpoint api_version: str field pydantic required \u00b6 Presently used version of the OPTIMADE API available_api_versions: AvailableApiVersion field pydantic required \u00b6 A list of dictionaries of available API versions at other base URLs available_endpoints: str field pydantic required \u00b6 List of available endpoints (i.e., the string to be appended to the versioned base URL). entry_types_by_format: List [ str ] field pydantic required \u00b6 Available entry endpoints as a function of output formats. formats: str field pydantic \u00b6 List of available output formats. is_index: bool field pydantic \u00b6 If true, this is an index meta-database base URL (see section Index Meta-Database). If this member is not provided, the client MUST assume this is not an index meta-database base URL (i.e., the default is for is_index to be false). BaseInfoResource pydantic \u00b6 links: ResourceLinks field pydantic \u00b6 a links object containing links related to the resource. meta: Meta field pydantic \u00b6 a meta object containing non-standard meta-information about a resource that can not be represented as an attribute or relationship. relationships: Relationships field pydantic \u00b6 a relationships object describing relationships between the resource and other JSON:API resources. entries \u00b6 EntryInfoProperty pydantic \u00b6 description: str field pydantic required \u00b6 description of the entry property sortable: bool field pydantic \u00b6 defines whether the entry property can be used for sorting with the \"sort\" parameter. If the entry listing endpoint supports sorting, this key MUST be present for sortable properties with value true . unit: str field pydantic \u00b6 the physical unit of the entry property EntryInfoResource pydantic \u00b6 description: str field pydantic required \u00b6 description of the entry formats: str field pydantic required \u00b6 list of available output formats. output_fields_by_format: List [ str ] field pydantic required \u00b6 a dictionary of available output fields for this entry type, where the keys are the values of the formats list and the values are the keys of the properties dictionary. properties: EntryInfoProperty field pydantic required \u00b6 a dictionary describing queryable properties for this entry type, where each key is a property ID. EntryRelationships pydantic \u00b6 This model wraps the JSON API Relationships to include type-specific top level keys. references: ReferenceRelationship field pydantic \u00b6 Object containing links to relationships with entries of the references type. structures: StructureRelationship field pydantic \u00b6 Object containing links to relationships with entries of the structures type. EntryResource pydantic \u00b6 attributes: EntryResourceAttributes field pydantic required \u00b6 a dictionary, containing key-value pairs representing the entry's properties, except for type and id. Database-provider-specific properties need to include the database-provider-specific prefix (see appendix Database-Provider-Specific Namespace Prefixes _). id: str field pydantic required \u00b6 An entry's ID as defined in section Definition of Terms _. - Type : string. - Requirements/Conventions : Support : REQUIRED, MUST NOT be :val: null . Query : MUST be a queryable property with support for all mandatory filter features. Response : REQUIRED in the response. See section Definition of Terms _. Examples : :val: \"db/1234567\" :val: \"cod/2000000\" :val: \"cod/2000000@1234567\" :val: \"nomad/L1234567890\" :val: \"42\" links: ResourceLinks field pydantic \u00b6 a links object containing links related to the resource. meta: Meta field pydantic \u00b6 a meta object containing non-standard meta-information about a resource that can not be represented as an attribute or relationship. relationships: EntryRelationships field pydantic \u00b6 a dictionary containing references to other entries according to the description in section Relationships _ encoded as JSON API Relationships <https://jsonapi.org/format/1.0/#document-resource-object-relationships> __. The OPTIONAL human-readable description of the relationship MAY be provided in the :field: description field inside the :field: meta dictionary. type: str field pydantic required \u00b6 The name of the type of an entry. - Type : string. - Requirements/Conventions : Support : REQUIRED, MUST NOT be :val: null . Query : MUST be a queryable property with support for all mandatory filter features. Response : REQUIRED in the response. MUST be an existing entry type. The entry of type <type> and ID <id> MUST be returned in response to a request for :endpoint: /<type>/<id> under the versioned base URL. Example : :val: \"structures\" EntryResourceAttributes pydantic \u00b6 Contains key-value pairs representing the entry's properties. immutable_id: str field pydantic \u00b6 The entry's immutable ID (e.g., an UUID). This is important for databases having preferred IDs that point to \"the latest version\" of a record, but still offer access to older variants. This ID maps to the version-specific record, in case it changes in the future. - Type : string. - Requirements/Conventions : Support : OPTIONAL, i.e., MAY be :val: null . Query : MUST be a queryable property with support for all mandatory filter features. Examples : :val: \"8bd3e750-b477-41a0-9b11-3a799f21b44f\" :val: \"fjeiwoj,54;@=%<>#32\" (Strings that are not URL-safe are allowed.) last_modified: datetime field pydantic required \u00b6 Date and time representing when the entry was last modified. - Type : timestamp. - Requirements/Conventions : Support : SHOULD be supported, i.e., SHOULD NOT be :val: null . Is REQUIRED in this implementation, i.e., MUST NOT be :val: null . Query : MUST be a queryable property with support for all mandatory filter features. Response : REQUIRED in the response unless the query parameter :query-param: response_fields is present and does not include this property. Example : As part of JSON response format: :VAL: \"2007-04-05T14:30Z\" (i.e., encoded as an RFC 3339 Internet Date/Time Format <https://tools.ietf.org/html/rfc3339#section-5.6> __ string.) ReferenceRelationship pydantic \u00b6 data: Optional [ Union [ optimade . models . optimade_json . BaseRelationshipResource , List [ optimade . models . optimade_json . BaseRelationshipResource ]]] field pydantic \u00b6 Resource linkage links: RelationshipLinks field pydantic \u00b6 a links object containing at least one of the following: self, related meta: Meta field pydantic \u00b6 a meta object that contains non-standard meta-information about the relationship. StructureRelationship pydantic \u00b6 data: Optional [ Union [ optimade . models . optimade_json . BaseRelationshipResource , List [ optimade . models . optimade_json . BaseRelationshipResource ]]] field pydantic \u00b6 Resource linkage links: RelationshipLinks field pydantic \u00b6 a links object containing at least one of the following: self, related meta: Meta field pydantic \u00b6 a meta object that contains non-standard meta-information about the relationship. TypedRelationship pydantic \u00b6 data: Optional [ Union [ optimade . models . optimade_json . BaseRelationshipResource , List [ optimade . models . optimade_json . BaseRelationshipResource ]]] field pydantic \u00b6 Resource linkage links: RelationshipLinks field pydantic \u00b6 a links object containing at least one of the following: self, related meta: Meta field pydantic \u00b6 a meta object that contains non-standard meta-information about the relationship. index_metadb \u00b6 IndexInfoAttributes pydantic \u00b6 Attributes for Base URL Info endpoint for an Index Meta-Database api_version: str field pydantic required \u00b6 Presently used version of the OPTIMADE API available_api_versions: AvailableApiVersion field pydantic required \u00b6 A list of dictionaries of available API versions at other base URLs available_endpoints: str field pydantic required \u00b6 List of available endpoints (i.e., the string to be appended to the versioned base URL). entry_types_by_format: List [ str ] field pydantic required \u00b6 Available entry endpoints as a function of output formats. formats: str field pydantic \u00b6 List of available output formats. is_index: bool field pydantic \u00b6 If true, this is an index meta-database base URL (see section Index Meta-Database). If this member is not provided, the client MUST assume this is not an index meta-database base URL (i.e., the default is for is_index to be false). IndexInfoResource pydantic \u00b6 Index Meta-Database Base URL Info enpoint resource links: ResourceLinks field pydantic \u00b6 a links object containing links related to the resource. meta: Meta field pydantic \u00b6 a meta object containing non-standard meta-information about a resource that can not be represented as an attribute or relationship. relationships: IndexRelationship field pydantic required \u00b6 Reference to the child identifier object under the links endpoint that the provider has chosen as their 'default' OPTIMADE API database. A client SHOULD present this database as the first choice when an end-user chooses this provider. IndexRelationship pydantic \u00b6 Index Meta-Database relationship data: RelatedChildResource field pydantic required \u00b6 JSON API resource linkage. It MUST be either null or contain a single child identifier object with the fields 'id' and 'type' RelatedChildResource pydantic \u00b6 Keep only type and id of a ChildResource id: str field pydantic required \u00b6 Resource ID jsonapi \u00b6 This module should reproduce JSON API v1.0 https://jsonapi.org/format/1.0/ Attributes pydantic \u00b6 Members of the attributes object (\"attributes\") represent information about the resource object in which it's defined. The keys for Attributes MUST NOT be: relationships links id type BaseResource pydantic \u00b6 Minimum requirements to represent a Resource id: str field pydantic required \u00b6 Resource ID type: str field pydantic required \u00b6 Resource type Error pydantic \u00b6 An error response code: str field pydantic \u00b6 an application-specific error code, expressed as a string value. detail: str field pydantic \u00b6 A human-readable explanation specific to this occurrence of the problem. id: str field pydantic \u00b6 A unique identifier for this particular occurrence of the problem. links: ErrorLinks field pydantic \u00b6 A links object storing about meta: Meta field pydantic \u00b6 a meta object containing non-standard meta-information about the error. source: ErrorSource field pydantic \u00b6 An object containing references to the source of the error status: str field pydantic \u00b6 the HTTP status code applicable to this problem, expressed as a string value. title: str field pydantic \u00b6 A short, human-readable summary of the problem. It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization. __hash__ ( self ) special \u00b6 Return hash(self). Source code in optimade/models/jsonapi.py 127 128 def __hash__ ( self ): return hash ( self . json ()) ErrorLinks pydantic \u00b6 A Links object specific to Error objects about: Optional [ Union [ pydantic . networks . AnyUrl , optimade . models . jsonapi . Link ]] field pydantic \u00b6 A link that leads to further details about this particular occurrence of the problem. ErrorSource pydantic \u00b6 an object containing references to the source of the error parameter: str field pydantic \u00b6 a string indicating which URI query parameter caused the error. pointer: str field pydantic \u00b6 a JSON Pointer [RFC6901] to the associated entity in the request document [e.g. \"/data\" for a primary data object, or \"/data/attributes/title\" for a specific attribute]. JsonApi pydantic \u00b6 An object describing the server's implementation meta: Meta field pydantic \u00b6 Non-standard meta information version: str field pydantic \u00b6 Version of the json API used Link pydantic \u00b6 A link MUST be represented as either: a string containing the link's URL or a link object. href: AnyUrl field pydantic required \u00b6 a string containing the link\u2019s URL. meta: Meta field pydantic \u00b6 a meta object containing non-standard meta-information about the link. Meta pydantic \u00b6 Non-standard meta-information that can not be represented as an attribute or relationship. Relationship pydantic \u00b6 Representation references from the resource object in which it\u2019s defined to other resource objects. data: Optional [ Union [ optimade . models . jsonapi . BaseResource , List [ optimade . models . jsonapi . BaseResource ]]] field pydantic \u00b6 Resource linkage links: RelationshipLinks field pydantic \u00b6 a links object containing at least one of the following: self, related meta: Meta field pydantic \u00b6 a meta object that contains non-standard meta-information about the relationship. RelationshipLinks pydantic \u00b6 A resource object MAY contain references to other resource objects (\"relationships\"). Relationships may be to-one or to-many. Relationships can be specified by including a member in a resource's links object. related: Optional [ Union [ pydantic . networks . AnyUrl , optimade . models . jsonapi . Link ]] field pydantic \u00b6 A related resource link self: Optional [ Union [ pydantic . networks . AnyUrl , optimade . models . jsonapi . Link ]] field pydantic \u00b6 A link to itself Relationships pydantic \u00b6 Members of the relationships object (\"relationships\") represent references from the resource object in which it's defined to other resource objects. Keys MUST NOT be: type id Resource pydantic \u00b6 Resource objects appear in a JSON:API document to represent resources. attributes: Attributes field pydantic \u00b6 an attributes object representing some of the resource\u2019s data. id: str field pydantic required \u00b6 Resource ID links: ResourceLinks field pydantic \u00b6 a links object containing links related to the resource. meta: Meta field pydantic \u00b6 a meta object containing non-standard meta-information about a resource that can not be represented as an attribute or relationship. relationships: Relationships field pydantic \u00b6 a relationships object describing relationships between the resource and other JSON:API resources. type: str field pydantic required \u00b6 Resource type ResourceLinks pydantic \u00b6 A Resource Links object self: Optional [ Union [ pydantic . networks . AnyUrl , optimade . models . jsonapi . Link ]] field pydantic \u00b6 A link that identifies the resource represented by the resource object. Response pydantic \u00b6 A top-level response data: Union [ NoneType , optimade . models . jsonapi . Resource , List [ optimade . models . jsonapi . Resource ]] field pydantic \u00b6 Outputted Data errors: Error field pydantic \u00b6 A list of unique errors included: Resource field pydantic \u00b6 A list of unique included resources jsonapi: JsonApi field pydantic \u00b6 Information about the JSON API used links: ToplevelLinks field pydantic \u00b6 Links associated with the primary data or errors meta: Meta field pydantic \u00b6 A meta object containing non-standard information related to the Success ToplevelLinks pydantic \u00b6 A set of Links objects, possibly including pagination first: AnyUrl field pydantic \u00b6 The first page of data last: AnyUrl field pydantic \u00b6 The last page of data next: AnyUrl field pydantic \u00b6 The next page of data prev: AnyUrl field pydantic \u00b6 The previous page of data related: Optional [ Union [ pydantic . networks . AnyUrl , optimade . models . jsonapi . Link ]] field pydantic \u00b6 A related resource link self: Optional [ Union [ pydantic . networks . AnyUrl , optimade . models . jsonapi . Link ]] field pydantic \u00b6 A link to itself links \u00b6 ChildResource pydantic \u00b6 A child object representing a link to an implementation exactly one layer below the current implementation attributes: LinksResourceAttributes field pydantic required \u00b6 a dictionary containing key-value pairs representing the entry's properties. id: str field pydantic required \u00b6 An entry's ID as defined in section Definition of Terms _. - Type : string. - Requirements/Conventions : Support : REQUIRED, MUST NOT be :val: null . Query : MUST be a queryable property with support for all mandatory filter features. Response : REQUIRED in the response. See section Definition of Terms _. Examples : :val: \"db/1234567\" :val: \"cod/2000000\" :val: \"cod/2000000@1234567\" :val: \"nomad/L1234567890\" :val: \"42\" links: ResourceLinks field pydantic \u00b6 a links object containing links related to the resource. meta: Meta field pydantic \u00b6 a meta object containing non-standard meta-information about a resource that can not be represented as an attribute or relationship. relationships: EntryRelationships field pydantic \u00b6 a dictionary containing references to other entries according to the description in section Relationships _ encoded as JSON API Relationships <https://jsonapi.org/format/1.0/#document-resource-object-relationships> __. The OPTIONAL human-readable description of the relationship MAY be provided in the :field: description field inside the :field: meta dictionary. LinksResource pydantic \u00b6 A Links endpoint resource object attributes: LinksResourceAttributes field pydantic required \u00b6 a dictionary containing key-value pairs representing the entry's properties. id: str field pydantic required \u00b6 An entry's ID as defined in section Definition of Terms _. - Type : string. - Requirements/Conventions : Support : REQUIRED, MUST NOT be :val: null . Query : MUST be a queryable property with support for all mandatory filter features. Response : REQUIRED in the response. See section Definition of Terms _. Examples : :val: \"db/1234567\" :val: \"cod/2000000\" :val: \"cod/2000000@1234567\" :val: \"nomad/L1234567890\" :val: \"42\" links: ResourceLinks field pydantic \u00b6 a links object containing links related to the resource. meta: Meta field pydantic \u00b6 a meta object containing non-standard meta-information about a resource that can not be represented as an attribute or relationship. relationships: EntryRelationships field pydantic \u00b6 a dictionary containing references to other entries according to the description in section Relationships _ encoded as JSON API Relationships <https://jsonapi.org/format/1.0/#document-resource-object-relationships> __. The OPTIONAL human-readable description of the relationship MAY be provided in the :field: description field inside the :field: meta dictionary. type: str field pydantic required \u00b6 MUST be either \"parent\", \"child\", or \"provider\". These objects are described in detail in sections Parent and Child Objects and Provider Objects. LinksResourceAttributes pydantic \u00b6 Links endpoint resource object attributes base_url: Optional [ Union [ pydantic . networks . AnyUrl , optimade . models . jsonapi . Link ]] field pydantic required \u00b6 JSON API links object, pointing to the base URL for this implementation description: str field pydantic required \u00b6 Human-readable description for the OPTIMADE API implementation a client may provide in a list to an end-user. homepage: Optional [ Union [ pydantic . networks . AnyUrl , optimade . models . jsonapi . Link ]] field pydantic required \u00b6 JSON API links object, pointing to a homepage URL for this implementation name: str field pydantic required \u00b6 Human-readable name for the OPTIMADE API implementation a client may provide in a list to an end-user. ParentResource pydantic \u00b6 A parent object representing a link to an implementation exactly one layer above the current implementation attributes: LinksResourceAttributes field pydantic required \u00b6 a dictionary containing key-value pairs representing the entry's properties. id: str field pydantic required \u00b6 An entry's ID as defined in section Definition of Terms _. - Type : string. - Requirements/Conventions : Support : REQUIRED, MUST NOT be :val: null . Query : MUST be a queryable property with support for all mandatory filter features. Response : REQUIRED in the response. See section Definition of Terms _. Examples : :val: \"db/1234567\" :val: \"cod/2000000\" :val: \"cod/2000000@1234567\" :val: \"nomad/L1234567890\" :val: \"42\" links: ResourceLinks field pydantic \u00b6 a links object containing links related to the resource. meta: Meta field pydantic \u00b6 a meta object containing non-standard meta-information about a resource that can not be represented as an attribute or relationship. relationships: EntryRelationships field pydantic \u00b6 a dictionary containing references to other entries according to the description in section Relationships _ encoded as JSON API Relationships <https://jsonapi.org/format/1.0/#document-resource-object-relationships> __. The OPTIONAL human-readable description of the relationship MAY be provided in the :field: description field inside the :field: meta dictionary. ProviderResource pydantic \u00b6 A provider object representing a link to another index meta-database by another database provider attributes: LinksResourceAttributes field pydantic required \u00b6 a dictionary containing key-value pairs representing the entry's properties. id: str field pydantic required \u00b6 An entry's ID as defined in section Definition of Terms _. - Type : string. - Requirements/Conventions : Support : REQUIRED, MUST NOT be :val: null . Query : MUST be a queryable property with support for all mandatory filter features. Response : REQUIRED in the response. See section Definition of Terms _. Examples : :val: \"db/1234567\" :val: \"cod/2000000\" :val: \"cod/2000000@1234567\" :val: \"nomad/L1234567890\" :val: \"42\" links: ResourceLinks field pydantic \u00b6 a links object containing links related to the resource. meta: Meta field pydantic \u00b6 a meta object containing non-standard meta-information about a resource that can not be represented as an attribute or relationship. relationships: EntryRelationships field pydantic \u00b6 a dictionary containing references to other entries according to the description in section Relationships _ encoded as JSON API Relationships <https://jsonapi.org/format/1.0/#document-resource-object-relationships> __. The OPTIONAL human-readable description of the relationship MAY be provided in the :field: description field inside the :field: meta dictionary. optimade_json \u00b6 Modified JSON API v1.0 for OPTIMADE API BaseRelationshipMeta pydantic \u00b6 Specific meta field for base relationship resource description: str field pydantic required \u00b6 OPTIONAL human-readable description of the relationship BaseRelationshipResource pydantic \u00b6 Minimum requirements to represent a relationship resource id: str field pydantic required \u00b6 Resource ID meta: BaseRelationshipMeta field pydantic \u00b6 Relationship meta field. MUST contain 'description' if supplied. type: str field pydantic required \u00b6 Resource type Implementation pydantic \u00b6 Information on the server implementation maintainer: ImplementationMaintainer field pydantic \u00b6 A dictionary providing details about the maintainer of the implementation. name: str field pydantic \u00b6 name of the implementation source_url: AnyUrl field pydantic \u00b6 URL of the implementation source, either downloadable archive or version control system version: str field pydantic \u00b6 version string of the current implementation ImplementationMaintainer pydantic \u00b6 Details about the maintainer of the implementation email: EmailStr field pydantic required \u00b6 the maintainer's email address OptimadeError pydantic \u00b6 detail MUST be present code: str field pydantic \u00b6 an application-specific error code, expressed as a string value. detail: str field pydantic required \u00b6 A human-readable explanation specific to this occurrence of the problem. id: str field pydantic \u00b6 A unique identifier for this particular occurrence of the problem. links: ErrorLinks field pydantic \u00b6 A links object storing about meta: Meta field pydantic \u00b6 a meta object containing non-standard meta-information about the error. source: ErrorSource field pydantic \u00b6 An object containing references to the source of the error status: str field pydantic \u00b6 the HTTP status code applicable to this problem, expressed as a string value. title: str field pydantic \u00b6 A short, human-readable summary of the problem. It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization. Provider pydantic \u00b6 Information on the database provider of the implementation. description: str field pydantic required \u00b6 a longer description of the database provider homepage: Optional [ Union [ pydantic . networks . AnyHttpUrl , optimade . models . jsonapi . Link ]] field pydantic \u00b6 a JSON API links object pointing to homepage of the database provider, either directly as a string, or as a link object. index_base_url: Optional [ Union [ pydantic . networks . AnyHttpUrl , optimade . models . jsonapi . Link ]] field pydantic \u00b6 a JSON API links object pointing to the base URL for the index meta-database as specified in Appendix 1, either directly as a string, or as a link object. name: str field pydantic required \u00b6 a short name for the database provider prefix: str field pydantic required \u00b6 database-provider-specific prefix as found in Appendix 1. Relationship pydantic \u00b6 Similar to normal JSON API relationship, but with addition of OPTIONAL meta field for a resource data: Optional [ Union [ optimade . models . optimade_json . BaseRelationshipResource , List [ optimade . models . optimade_json . BaseRelationshipResource ]]] field pydantic \u00b6 Resource linkage links: RelationshipLinks field pydantic \u00b6 a links object containing at least one of the following: self, related meta: Meta field pydantic \u00b6 a meta object that contains non-standard meta-information about the relationship. ResponseMeta pydantic \u00b6 A JSON API meta member that contains JSON API meta objects of non-standard meta-information. OPTIONAL additional information global to the query that is not specified in this document, MUST start with a database-provider-specific prefix. api_version: str field pydantic required \u00b6 a string containing the version of the API implementation, e.g. v0.9.5 data_available: int field pydantic \u00b6 an integer containing the total number of data objects available in the database data_returned: ConstrainedIntValue field pydantic required \u00b6 an integer containing the number of data objects returned for the query. implementation: Implementation field pydantic \u00b6 a dictionary describing the server implementation last_id: str field pydantic \u00b6 a string containing the last ID returned more_data_available: bool field pydantic required \u00b6 false if all data has been returned, and true if not. provider: Provider field pydantic required \u00b6 information on the database provider of the implementation. query: ResponseMetaQuery field pydantic required \u00b6 information on the query that was requested response_message: str field pydantic \u00b6 response string from the server time_stamp: datetime field pydantic required \u00b6 a string containing the date and time at which the query was exexcuted warnings: Warnings field pydantic \u00b6 List of warning resource objects representing non-critical errors or warnings. A warning resource object is defined similarly to a JSON API error object, but MUST also include the field type, which MUST have the value \"warning\". The field detail MUST be present and SHOULD contain a non-critical message, e.g., reporting unrecognized search attributes or deprecated features. The field status, representing a HTTP response status code, MUST NOT be present for a warning resource object. This is an exclusive field for error resource objects. ResponseMetaQuery pydantic \u00b6 Information on the query that was requested. representation: str field pydantic required \u00b6 a string with the part of the URL that follows the base URL. Example: '/structures?' Success pydantic \u00b6 errors are not allowed data: Union [ NoneType , optimade . models . jsonapi . Resource , List [ optimade . models . jsonapi . Resource ]] field pydantic \u00b6 Outputted Data errors: Error field pydantic \u00b6 A list of unique errors included: Resource field pydantic \u00b6 A list of unique included resources jsonapi: JsonApi field pydantic \u00b6 Information about the JSON API used links: ToplevelLinks field pydantic \u00b6 Links associated with the primary data or errors meta: ResponseMeta field pydantic \u00b6 A meta object containing non-standard information either_data_meta_or_errors_must_be_set ( values ) classmethod \u00b6 Overwriting the existing validation function, since 'errors' MUST NOT be set Source code in optimade/models/optimade_json.py 200 201 202 203 204 205 206 207 208 209 210 211 212 213 @root_validator ( pre = True ) def either_data_meta_or_errors_must_be_set ( cls , values ): \"\"\"Overwriting the existing validation function, since 'errors' MUST NOT be set\"\"\" required_fields = ( \"data\" , \"meta\" ) if not any ( values . get ( field ) for field in required_fields ): raise ValueError ( f \"At least one of { required_fields } MUST be specified in the top-level response\" ) # errors MUST be skipped if values . get ( \"errors\" , None ) is not None : raise ValueError ( f \"'errors' MUST be skipped for a successful response\" ) return values Warnings pydantic \u00b6 OPTIMADE-specific warning class based on OPTIMADE-specific JSON API Error. From the specification: A warning resource object is defined similarly to a JSON API error object , but MUST also include the field type , which MUST have the value \"warning\" . The field detail MUST be present and SHOULD contain a non - critical message , e . g ., reporting unrecognized search attributes or deprecated features . Note : Must be named \"Warnings\" , since \"Warning\" is a built - in Python class . code: str field pydantic \u00b6 an application-specific error code, expressed as a string value. detail: str field pydantic required \u00b6 A human-readable explanation specific to this occurrence of the problem. id: str field pydantic \u00b6 A unique identifier for this particular occurrence of the problem. links: ErrorLinks field pydantic \u00b6 A links object storing about meta: Meta field pydantic \u00b6 a meta object containing non-standard meta-information about the error. source: ErrorSource field pydantic \u00b6 An object containing references to the source of the error status: str field pydantic \u00b6 the HTTP status code applicable to this problem, expressed as a string value. title: str field pydantic \u00b6 A short, human-readable summary of the problem. It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization. type: str field pydantic \u00b6 Warnings must be of type \"warning\" references \u00b6 Person pydantic \u00b6 firstname: str field pydantic \u00b6 First name of the person. lastname: str field pydantic \u00b6 Last name of the person. ReferenceResource pydantic \u00b6 The :entry: references entries describe bibliographic references. The following properties are used to provide the bibliographic details: address , annote , booktitle , chapter , crossref , edition , howpublished , institution , journal , key , month , note , number , organization , pages , publisher , school , series , title , type , volume , year : Meanings of these properties match the BibTeX specification <http://bibtexml.sourceforge.net/btxdoc.pdf> __, values are strings; authors and editors : lists of person objects which are dictionaries with the following keys: name : Full name of the person, REQUIRED. firstname , lastname : Parts of the person's name, OPTIONAL. doi and url : values are strings. Requirements/Conventions : Support : OPTIONAL, i.e., any of the properties MAY be :val: null . Query : Support for queries on any of these properties is OPTIONAL. If supported, filters MAY support only a subset of comparison operators. Every references entry MUST contain at least one of the properties. id: str field pydantic required \u00b6 An entry's ID as defined in section Definition of Terms _. - Type : string. - Requirements/Conventions : Support : REQUIRED, MUST NOT be :val: null . Query : MUST be a queryable property with support for all mandatory filter features. Response : REQUIRED in the response. See section Definition of Terms _. Examples : :val: \"db/1234567\" :val: \"cod/2000000\" :val: \"cod/2000000@1234567\" :val: \"nomad/L1234567890\" :val: \"42\" links: ResourceLinks field pydantic \u00b6 a links object containing links related to the resource. meta: Meta field pydantic \u00b6 a meta object containing non-standard meta-information about a resource that can not be represented as an attribute or relationship. relationships: EntryRelationships field pydantic \u00b6 a dictionary containing references to other entries according to the description in section Relationships _ encoded as JSON API Relationships <https://jsonapi.org/format/1.0/#document-resource-object-relationships> __. The OPTIONAL human-readable description of the relationship MAY be provided in the :field: description field inside the :field: meta dictionary. type: str field pydantic \u00b6 The name of the type of an entry. Any entry MUST be able to be fetched using the base URL <Base URL_> _ type and ID at the url :endpoint: <base URL>/<type>/<id> . - Type : string. - Requirements/Conventions : Support : REQUIRED, MUST NOT be :val: null . Query : MUST be a queryable property with support for all mandatory filter features. Response : REQUIRED in the response. MUST be an existing entry type. The entry of type <type> and ID <id> MUST be returned in response to a request for :endpoint: /<type>/<id> under the versioned base URL. Example : :val: \"structures\" ReferenceResourceAttributes pydantic \u00b6 Model that stores the attributes of a reference. Many properties match the meaning described in the BibTeX specification . address: str field pydantic \u00b6 Meaning of property matches the BiBTeX specification. annote: str field pydantic \u00b6 Meaning of property matches the BiBTeX specification. authors: Person field pydantic \u00b6 List of person objects containing the authors of the reference. bib_type: str field pydantic \u00b6 Type of the reference, corresponding to the type property in the BiBTeX specification. booktitle: str field pydantic \u00b6 Meaning of property matches the BiBTeX specification. chapter: str field pydantic \u00b6 Meaning of property matches the BiBTeX specification. crossref: str field pydantic \u00b6 Meaning of property matches the BiBTeX specification. doi: str field pydantic \u00b6 The digital object identifier of the reference. edition: str field pydantic \u00b6 Meaning of property matches the BiBTeX specification. editors: Person field pydantic \u00b6 List of person objects containing the editors of the reference. howpublished: str field pydantic \u00b6 Meaning of property matches the BiBTeX specification. immutable_id: str field pydantic \u00b6 The entry's immutable ID (e.g., an UUID). This is important for databases having preferred IDs that point to \"the latest version\" of a record, but still offer access to older variants. This ID maps to the version-specific record, in case it changes in the future. - Type : string. - Requirements/Conventions : Support : OPTIONAL, i.e., MAY be :val: null . Query : MUST be a queryable property with support for all mandatory filter features. Examples : :val: \"8bd3e750-b477-41a0-9b11-3a799f21b44f\" :val: \"fjeiwoj,54;@=%<>#32\" (Strings that are not URL-safe are allowed.) institution: str field pydantic \u00b6 Meaning of property matches the BiBTeX specification. journal: str field pydantic \u00b6 Meaning of property matches the BiBTeX specification. key: str field pydantic \u00b6 Meaning of property matches the BiBTeX specification. last_modified: datetime field pydantic required \u00b6 Date and time representing when the entry was last modified. - Type : timestamp. - Requirements/Conventions : Support : SHOULD be supported, i.e., SHOULD NOT be :val: null . Is REQUIRED in this implementation, i.e., MUST NOT be :val: null . Query : MUST be a queryable property with support for all mandatory filter features. Response : REQUIRED in the response unless the query parameter :query-param: response_fields is present and does not include this property. Example : As part of JSON response format: :VAL: \"2007-04-05T14:30Z\" (i.e., encoded as an RFC 3339 Internet Date/Time Format <https://tools.ietf.org/html/rfc3339#section-5.6> __ string.) month: str field pydantic \u00b6 Meaning of property matches the BiBTeX specification. note: str field pydantic \u00b6 Meaning of property matches the BiBTeX specification. number: str field pydantic \u00b6 Meaning of property matches the BiBTeX specification. organization: str field pydantic \u00b6 Meaning of property matches the BiBTeX specification. pages: str field pydantic \u00b6 Meaning of property matches the BiBTeX specification. publisher: str field pydantic \u00b6 Meaning of property matches the BiBTeX specification. school: str field pydantic \u00b6 Meaning of property matches the BiBTeX specification. series: str field pydantic \u00b6 Meaning of property matches the BiBTeX specification. title: str field pydantic \u00b6 Meaning of property matches the BiBTeX specification. url: AnyUrl field pydantic \u00b6 The URL of the reference. volume: str field pydantic \u00b6 Meaning of property matches the BiBTeX specification. year: str field pydantic \u00b6 Meaning of property matches the BiBTeX specification. responses \u00b6 EntryInfoResponse pydantic \u00b6 data: EntryInfoResource field pydantic required \u00b6 OPTIMADE information for an entry endpoint errors: Error field pydantic \u00b6 A list of unique errors included: Resource field pydantic \u00b6 A list of unique included resources jsonapi: JsonApi field pydantic \u00b6 Information about the JSON API used links: ToplevelLinks field pydantic \u00b6 Links associated with the primary data or errors meta: ResponseMeta field pydantic \u00b6 A meta object containing non-standard information EntryResponseMany pydantic \u00b6 errors: Error field pydantic \u00b6 A list of unique errors jsonapi: JsonApi field pydantic \u00b6 Information about the JSON API used links: ToplevelLinks field pydantic \u00b6 Links associated with the primary data or errors meta: ResponseMeta field pydantic \u00b6 A meta object containing non-standard information EntryResponseOne pydantic \u00b6 errors: Error field pydantic \u00b6 A list of unique errors jsonapi: JsonApi field pydantic \u00b6 Information about the JSON API used links: ToplevelLinks field pydantic \u00b6 Links associated with the primary data or errors meta: ResponseMeta field pydantic \u00b6 A meta object containing non-standard information ErrorResponse pydantic \u00b6 errors MUST be present and data MUST be skipped data: Union [ NoneType , optimade . models . jsonapi . Resource , List [ optimade . models . jsonapi . Resource ]] field pydantic \u00b6 Outputted Data errors: OptimadeError field pydantic required \u00b6 A list of OPTIMADE-specific JSON API error objects, where the field detail MUST be present. included: Resource field pydantic \u00b6 A list of unique included resources jsonapi: JsonApi field pydantic \u00b6 Information about the JSON API used links: ToplevelLinks field pydantic \u00b6 Links associated with the primary data or errors meta: ResponseMeta field pydantic \u00b6 A meta object containing non-standard information IndexInfoResponse pydantic \u00b6 data: IndexInfoResource field pydantic required \u00b6 Index meta-database /info data errors: Error field pydantic \u00b6 A list of unique errors included: Resource field pydantic \u00b6 A list of unique included resources jsonapi: JsonApi field pydantic \u00b6 Information about the JSON API used links: ToplevelLinks field pydantic \u00b6 Links associated with the primary data or errors meta: ResponseMeta field pydantic \u00b6 A meta object containing non-standard information InfoResponse pydantic \u00b6 data: BaseInfoResource field pydantic required \u00b6 The implementations /info data errors: Error field pydantic \u00b6 A list of unique errors included: Resource field pydantic \u00b6 A list of unique included resources jsonapi: JsonApi field pydantic \u00b6 Information about the JSON API used links: ToplevelLinks field pydantic \u00b6 Links associated with the primary data or errors meta: ResponseMeta field pydantic \u00b6 A meta object containing non-standard information LinksResponse pydantic \u00b6 data: Union [ List [ optimade . models . links . LinksResource ], List [ Dict [ str , Any ]]] field pydantic required \u00b6 List of unique OPTIMADE links resource objects errors: Error field pydantic \u00b6 A list of unique errors jsonapi: JsonApi field pydantic \u00b6 Information about the JSON API used links: ToplevelLinks field pydantic \u00b6 Links associated with the primary data or errors meta: ResponseMeta field pydantic \u00b6 A meta object containing non-standard information ReferenceResponseMany pydantic \u00b6 data: Union [ List [ optimade . models . references . ReferenceResource ], List [ Dict [ str , Any ]]] field pydantic required \u00b6 List of unique OPTIMADE references entry resource objects errors: Error field pydantic \u00b6 A list of unique errors jsonapi: JsonApi field pydantic \u00b6 Information about the JSON API used links: ToplevelLinks field pydantic \u00b6 Links associated with the primary data or errors meta: ResponseMeta field pydantic \u00b6 A meta object containing non-standard information ReferenceResponseOne pydantic \u00b6 data: Optional [ Union [ optimade . models . references . ReferenceResource , Dict [ str , Any ]]] field pydantic required \u00b6 A single references entry resource errors: Error field pydantic \u00b6 A list of unique errors jsonapi: JsonApi field pydantic \u00b6 Information about the JSON API used links: ToplevelLinks field pydantic \u00b6 Links associated with the primary data or errors meta: ResponseMeta field pydantic \u00b6 A meta object containing non-standard information StructureResponseMany pydantic \u00b6 data: Union [ List [ optimade . models . structures . StructureResource ], List [ Dict [ str , Any ]]] field pydantic required \u00b6 List of unique OPTIMADE structures entry resource objects errors: Error field pydantic \u00b6 A list of unique errors jsonapi: JsonApi field pydantic \u00b6 Information about the JSON API used links: ToplevelLinks field pydantic \u00b6 Links associated with the primary data or errors meta: ResponseMeta field pydantic \u00b6 A meta object containing non-standard information StructureResponseOne pydantic \u00b6 data: Optional [ Union [ optimade . models . structures . StructureResource , Dict [ str , Any ]]] field pydantic required \u00b6 A single structures entry resource errors: Error field pydantic \u00b6 A list of unique errors jsonapi: JsonApi field pydantic \u00b6 Information about the JSON API used links: ToplevelLinks field pydantic \u00b6 Links associated with the primary data or errors meta: ResponseMeta field pydantic \u00b6 A meta object containing non-standard information structures \u00b6 Assembly pydantic \u00b6 A description of groups of sites that are statistically correlated. - ** Examples ** ( for each entry of the assemblies list ): - : val : ` { \"sites_in_groups\": [ [ 0 ] , [ 1 ] ], \" group_probabilities : [ 0.3 , 0.7 ] } ` : the first site and the second site never occur at the same time in the unit cell . Statistically , 30 % of the times the first site is present , while 70 % of the times the second site is present . - : val : ` { \"sites_in_groups\": [ [ 1 , 2 ] , [ 3 ] ], \" group_probabilities : [ 0.3 , 0.7 ] } ` : the second and third site are either present together or not present ; they form the first group of atoms for this assembly . The second group is formed by the fourth site . Sites of the first group ( the second and the third ) are never present at the same time as the fourth site . 30 % of times sites 1 and 2 are present ( and site 3 is absent ); 70 % of times site 3 is present ( and sites 1 and 2 are absent ). group_probabilities: float field pydantic required \u00b6 Statistical probability of each group. It MUST have the same length as :property: sites_in_groups . It SHOULD sum to one. See below for examples of how to specify the probability of the occurrence of a vacancy. The possible reasons for the values not to sum to one are the same as already specified above for the :property: concentration of each :property: species , see property species _. sites_in_groups: List [ int ] field pydantic required \u00b6 Index of the sites (0-based) that belong to each group for each assembly. Example: :val: [[1], [2]] : two groups, one with the second site, one with the third. Example: :val: [[1,2], [3]] : one group with the second and third site, one with the fourth. Periodicity \u00b6 An enumeration. Species pydantic \u00b6 A list describing the species of the sites of this structure. Species can be pure chemical elements, or virtual-crystal atoms representing a statistical occupation of a given site by multiple chemical elements. - ** Examples ** : - : val : ` [ { \"name\" : \"Ti\" , \"chemical_symbols\" : [ \"Ti\" ], \"concentration\" : [ 1 . 0 ] } ] ` : any site with this species is occupied by a Ti atom . - : val : ` [ { \"name\" : \"Ti\" , \"chemical_symbols\" : [ \"Ti\" , \"vacancy\" ], \"concentration\" : [ 0 . 9 , 0 . 1 ] } ] ` : any site with this species is occupied by a Ti atom with 90 % probability , and has a vacancy with 10 % probability . - : val : ` [ { \"name\" : \"BaCa\" , \"chemical_symbols\" : [ \"vacancy\" , \"Ba\" , \"Ca\" ], \"concentration\" : [ 0 . 05 , 0 . 45 , 0 . 5 ], \"mass\" : 88 . 5 } ] ` : any site with this species is occupied by a Ba atom with 45 % probability , a Ca atom with 50 % probability , and by a vacancy with 5 % probability . The mass of this site is ( on average ) 88 . 5 a . m . u . - : val : ` [ { \"name\" : \"C12\" , \"chemical_symbols\" : [ \"C\" ], \"concentration\" : [ 1 . 0 ], \"mass\" : 12 . 0 } ] ` : any site with this species is occupied by a carbon isotope with mass 12 . - : val : ` [ { \"name\" : \"C13\" , \"chemical_symbols\" : [ \"C\" ], \"concentration\" : [ 1 . 0 ], \"mass\" : 13 . 0 } ] ` : any site with this species is occupied by a carbon isotope with mass 13 . chemical_symbols: str field pydantic required \u00b6 MUST be a list of strings of all chemical elements composing this species. It MUST be one of the following: a valid chemical-element name, or the special value :val: \"X\" to represent a non-chemical element, or the special value :val: \"vacancy\" to represent that this site has a non-zero probability of having a vacancy (the respective probability is indicated in the :property: concentration list, see below). If any one entry in the :property: species list has a :property: chemical_symbols list that is longer than 1 element, the correct flag MUST be set in the list :property: structure_features (see property structure_features _). concentration: float field pydantic required \u00b6 MUST be a list of floats, with same length as :property: chemical_symbols . The numbers represent the relative concentration of the corresponding chemical symbol in this species. The numbers SHOULD sum to one. Cases in which the numbers do not sum to one typically fall only in the following two categories: Numerical errors when representing float numbers in fixed precision, e.g. for two chemical symbols with concentrations :val: 1/3 and :val: 2/3 , the concentration might look something like :val: [0.33333333333, 0.66666666666] . If the client is aware that the sum is not one because of numerical precision, it can renormalize the values so that the sum is exactly one. Experimental errors in the data present in the database. In this case, it is the responsibility of the client to decide how to process the data. Note that concentrations are uncorrelated between different site (even of the same species). mass: float field pydantic \u00b6 If present MUST be a float expressed in a.m.u. original_name: str field pydantic \u00b6 Can be any valid Unicode string, and SHOULD contain (if specified) the name of the species that is used internally in the source database. Note: With regards to \"source database\", we refer to the immediate source being queried via the OPTIMADE API implementation. The main use of this field is for source databases that use species names, containing characters that are not allowed (see description of the list property species_at_sites _). StructureResource pydantic \u00b6 Representing a structure. id: str field pydantic required \u00b6 An entry's ID as defined in section Definition of Terms _. - Type : string. - Requirements/Conventions : Support : REQUIRED, MUST NOT be :val: null . Query : MUST be a queryable property with support for all mandatory filter features. Response : REQUIRED in the response. See section Definition of Terms _. Examples : :val: \"db/1234567\" :val: \"cod/2000000\" :val: \"cod/2000000@1234567\" :val: \"nomad/L1234567890\" :val: \"42\" links: ResourceLinks field pydantic \u00b6 a links object containing links related to the resource. meta: Meta field pydantic \u00b6 a meta object containing non-standard meta-information about a resource that can not be represented as an attribute or relationship. relationships: EntryRelationships field pydantic \u00b6 a dictionary containing references to other entries according to the description in section Relationships _ encoded as JSON API Relationships <https://jsonapi.org/format/1.0/#document-resource-object-relationships> __. The OPTIONAL human-readable description of the relationship MAY be provided in the :field: description field inside the :field: meta dictionary. type: str field pydantic \u00b6 The name of the type of an entry. Any entry MUST be able to be fetched using the base URL <Base URL_> _ type and ID at the url :endpoint: <base URL>/<type>/<id> . - Type : string. - Requirements/Conventions : Support : REQUIRED, MUST NOT be :val: null . Query : MUST be a queryable property with support for all mandatory filter features. Response : REQUIRED in the response. MUST be an existing entry type. The entry of type <type> and ID <id> MUST be returned in response to a request for :endpoint: /<type>/<id> under the versioned base URL. Example : :val: \"structures\" StructureResourceAttributes pydantic \u00b6 This class contains the Field for the attributes used to represent a structure, e.g. unit cell, atoms, positions. assemblies: Assembly field pydantic \u00b6 A description of groups of sites that are statistically correlated. - Type : list of dictionary with keys: :property: sites_in_groups : list of list of integers (REQUIRED) :property: group_probabilities : list of floats (REQUIRED) Requirements/Conventions : Support : OPTIONAL support in implementations, i.e., MAY be :val: null . Query : Support for queries on this property is OPTIONAL. If supported, filters MAY support only a subset of comparison operators. If present, the correct flag MUST be set in the list :property: structure_features (see property structure_features _). Client implementations MUST check its presence (as its presence changes the interpretation of the structure). If present, it MUST be a list of dictionaries, each of which represents an assembly and MUST have the following two keys: sites_in_groups : Index of the sites (0-based) that belong to each group for each assembly. Example: :val: [[1], [2]] : two groups, one with the second site, one with the third. Example: :val: [[1,2], [3]] : one group with the second and third site, one with the fourth. group_probabilities : Statistical probability of each group. It MUST have the same length as :property: sites_in_groups . It SHOULD sum to one. See below for examples of how to specify the probability of the occurrence of a vacancy. The possible reasons for the values not to sum to one are the same as already specified above for the :property: concentration of each :property: species , see property species _. If a site is not present in any group, it means that it is present with 100 % probability (as if no assembly was specified). A site MUST NOT appear in more than one group. Examples (for each entry of the assemblies list): :val: {\"sites_in_groups\": [[0], [1]], \"group_probabilities: [0.3, 0.7]} : the first site and the second site never occur at the same time in the unit cell. Statistically, 30 % of the times the first site is present, while 70 % of the times the second site is present. :val: {\"sites_in_groups\": [[1,2], [3]], \"group_probabilities: [0.3, 0.7]} : the second and third site are either present together or not present; they form the first group of atoms for this assembly. The second group is formed by the fourth site. Sites of the first group (the second and the third) are never present at the same time as the fourth site. 30 % of times sites 1 and 2 are present (and site 3 is absent); 70 % of times site 3 is present (and sites 1 and 2 are absent). Notes : Assemblies are essential to represent, for instance, the situation where an atom can statistically occupy two different positions (sites). By defining groups, it is possible to represent, e.g., the case where a functional molecule (and not just one atom) is either present or absent (or the case where it it is present in two conformations) Considerations on virtual alloys and on vacancies: In the special case of a virtual alloy, these specifications allow two different, equivalent ways of specifying them. For instance, for a site at the origin with 30 % probability of being occupied by Si, 50 % probability of being occupied by Ge, and 20 % of being a vacancy, the following two representations are possible: Using a single species: .. code:: jsonc { \"cartesian_site_positions\": [[0,0,0]], \"species_at_sites\": [\"SiGe-vac\"], \"species\": [ { \"name\": \"SiGe-vac\", \"chemical_symbols\": [\"Si\", \"Ge\", \"vacancy\"], \"concentration\": [0.3, 0.5, 0.2] } ] // ... } Using multiple species and the assemblies: .. code:: jsonc { \"cartesian_site_positions\": [ [0,0,0], [0,0,0], [0,0,0] ], \"species_at_sites\": [\"Si\", \"Ge\", \"vac\"], \"species\": { \"Si\": { \"chemical_symbols\": [\"Si\"], \"concentration\": [1.0] }, \"Ge\": { \"chemical_symbols\": [\"Ge\"], \"concentration\": [1.0] }, \"vac\": { \"chemical_symbols\": [\"vacancy\"], \"concentration\": [1.0] } }, \"assemblies\": [ { \"sites_in_groups\": [ [0], [1], [2] ], \"group_probabilities\": [0.3, 0.5, 0.2] } ] // ... } It is up to the database provider to decide which representation to use, typically depending on the internal format in which the structure is stored. However, given a structure identified by a unique ID, the API implementation MUST always provide the same representation for it. The probabilities of occurrence of different assemblies are uncorrelated. So, for instance in the following case with two assemblies: .. code:: jsonc { \"assemblies\": [ { \"sites_in_groups\": [ [0], [1] ], \"group_probabilities\": [0.2, 0.8], }, { \"sites_in_groups\": [ [2], [3] ], \"group_probabilities\": [0.3, 0.7] } ] } Site 0 is present with a probability of 20 % and site 1 with a probability of 80 %. These two sites are correlated (either site 0 or 1 is present). Similarly, site 2 is present with a probability of 30 % and site 3 with a probability of 70 %. These two sites are correlated (either site 2 or 3 is present). However, the presence or absence of sites 0 and 1 is not correlated with the presence or absence of sites 2 and 3 (in the specific example, the pair of sites (0, 2) can occur with 0.2 0.3 = 6 % probability; the pair (0, 3) with 0.2 0.7 = 14 % probability; the pair (1, 2) with 0.8 0.3 = 24 % probability; and the pair (1, 3) with 0.8 0.7 = 56 % probability). cartesian_site_positions: Tuple [ Optional [ Union [ float , NoneType ], Union [ float , NoneType ], Union [ float ]]] field pydantic required \u00b6 Cartesian positions of each site. A site is an atom, a site potentially occupied by an atom, or a placeholder for a virtual mixture of atoms (e.g., in a virtual crystal approximation). - Type : list of list of floats and/or unknown values - Requirements/Conventions : Support : SHOULD be supported, i.e., SHOULD NOT be :val: null . Is REQUIRED in this implementation, i.e., MUST NOT be :val: null . Query : Support for queries on this property is OPTIONAL. If supported, filters MAY support only a subset of comparison operators. It MUST be a list of length N times 3, where N is the number of sites in the structure. An entry MAY have multiple sites at the same Cartesian position (for a relevant use of this, see e.g., the property assemblies _). If a component of the position is unknown, the :val: null value should be provided instead (see section Properties with unknown value ). Otherwise, it should be a float value, expressed in angstrom (\u00c5). If at least one of the coordinates is unknown, the correct flag in the list property structure_features MUST be set. Notes : (for implementers) While this is unrelated to this OPTIMADE specification: If you decide to store internally the :property: cartesian_site_positions as a float array, you might want to represent :val: null values with :field-val: NaN values. The latter being valid float numbers in the IEEE 754 standard in IEEE 754-1985 <https://doi.org/10.1109/IEEESTD.1985.82928> and in the updated version IEEE 754-2008 <https://doi.org/10.1109/IEEESTD.2008.4610935> . Examples : :val: [[0,0,0],[0,0,2]] indicates a structure with two sites, one sitting at the origin and one along the (positive) z -axis, 2 \u00c5 away from the origin. chemical_formula_anonymous: str field pydantic required \u00b6 The anonymous formula is the :property: chemical_formula_reduced , but where the elements are instead first ordered by their chemical proportion number, and then, in order left to right, replaced by anonymous symbols A, B, C, ..., Z, Aa, Ba, ..., Za, Ab, Bb, ... and so on. - Type : string - Requirements/Conventions : Support : SHOULD be supported, i.e., SHOULD NOT be :val: null . Is REQUIRED in this implementation, i.e., MUST NOT be :val: null . Query : MUST be a queryable property. However, support for filters using partial string matching with this property is OPTIONAL (i.e., BEGINS WITH, ENDS WITH, and CONTAINS). Examples : :val: \"A2B\" :val: \"A42B42C16D12E10F9G5\" Querying : A filter that matches an exactly given formula is :filter: chemical_formula_anonymous=\"A2B\" . chemical_formula_descriptive: str field pydantic required \u00b6 The chemical formula for a structure as a string in a form chosen by the API implementation. - Type : string - Requirements/Conventions : Support : SHOULD be supported, i.e., SHOULD NOT be :val: null . Is REQUIRED in this implementation, i.e., MUST NOT be :val: null . Query : MUST be a queryable property with support for all mandatory filter operators. The chemical formula is given as a string consisting of properly capitalized element symbols followed by integers or decimal numbers, balanced parentheses, square, and curly brackets ( , ) , [ , ] , { , } , commas, the + , - , : and = symbols. The parentheses are allowed to be followed by a number. Spaces are allowed anywhere except within chemical symbols. The order of elements and any groupings indicated by parentheses or brackets are chosen freely by the API implementation. The string SHOULD be arithmetically consistent with the element ratios in the :property: chemical_formula_reduced property. It is RECOMMENDED, but not mandatory, that symbols, parentheses and brackets, if used, are used with the meanings prescribed by IUPAC's Nomenclature of Organic Chemistry <https://www.qmul.ac.uk/sbcs/iupac/bibliog/blue.html> __. Examples : :val: \"(H2O)2 Na\" :val: \"NaCl\" :val: \"CaCO3\" :val: \"CCaO3\" :val: \"(CH3)3N+ - [CH2]2-OH = Me3N+ - CH2 - CH2OH\" Query examples : Note: the free-form nature of this property is likely to make queries on it across different databases inconsistent. A filter that matches an exactly given formula: :filter: chemical_formula_descriptive=\"(H2O)2 Na\" . A filter that does a partial match: :filter: chemical_formula_descriptive CONTAINS \"H2O\" . chemical_formula_hill: str field pydantic \u00b6 The chemical formula for a structure in Hill form <https://dx.doi.org/10.1021/ja02046a005> __ with element symbols followed by integer chemical proportion numbers. The proportion number MUST be omitted if it is 1. - Type : string - Requirements/Conventions : Support : OPTIONAL, i.e., MAY be :val: null . Query : Support for queries on these properties are OPTIONAL. If supported, only a subset of filter operators MAY be supported. The overall scale factor of the chemical proportions is chosen such that the resulting values are integers that indicate the most chemically relevant unit of which the system is composed. For example, if the structure is a repeating unit cell with four hydrogens and four oxygens that represents two hydroperoxide molecules, :property: chemical_formula_hill is :val: \"H2O2\" (i.e., not :val: \"HO\" , nor :val: \"H4O4\" ). If the chemical insight needed to ascribe a Hill formula to the system is not present, the property MUST be handled as unset. Element names MUST have proper capitalization (e.g., :val: \"Si\" , not :VAL: \"SI\" for \"silicon\"). Elements MUST be placed in Hill order <https://dx.doi.org/10.1021/ja02046a005> __, followed by their integer chemical proportion number. Hill order means: if carbon is present, it is placed first, and if also present, hydrogen is placed second. After that, all other elements are ordered alphabetically. If carbon is not present, all elements are ordered alphabetically. If the system has sites with partial occupation and the total occupations of each element do not all sum up to integers, then the Hill formula SHOULD be handled as unset. No spaces or separators are allowed. Examples : :val: \"H2O2\" Query examples : A filter that matches an exactly given formula is :filter: chemical_formula_hill=\"H2O2\" . chemical_formula_reduced: str field pydantic required \u00b6 The reduced chemical formula for a structure as a string with element symbols and integer chemical proportion numbers. The proportion number MUST be omitted if it is 1. - Type : string - Requirements/Conventions : Support : SHOULD be supported, i.e., SHOULD NOT be :val: null . Is REQUIRED in this implementation, i.e., MUST NOT be :val: null . Query : MUST be a queryable property. However, support for filters using partial string matching with this property is OPTIONAL (i.e., BEGINS WITH, ENDS WITH, and CONTAINS). Intricate querying on formula components are instead recommended to be formulated using set-type filter operators on the multi valued :property: elements and :property: elements_proportions properties. Element names MUST have proper capitalization (e.g., :val: \"Si\" , not :VAL: \"SI\" for \"silicon\"). Elements MUST be placed in alphabetical order, followed by their integer chemical proportion number. For structures with no partial occupation, the chemical proportion numbers are the smallest integers for which the chemical proportion is exactly correct. For structures with partial occupation, the chemical proportion numbers are integers that within reasonable approximation indicate the correct chemical proportions. The precise details of how to perform the rounding is chosen by the API implementation. No spaces or separators are allowed. Examples : :val: \"H2NaO\" :val: \"ClNa\" :val: \"CCaO3\" Query examples : A filter that matches an exactly given formula is :filter: chemical_formula_reduced=\"H2NaO\" . dimension_types: Tuple [ optimade . models . structures . Periodicity , optimade . models . structures . Periodicity , optimade . models . structures . Periodicity ] field pydantic required \u00b6 List of three integers. For each of the three directions indicated by the three lattice vectors (see property lattice_vectors ). This list indicates if the direction is periodic (value :val: 1 ) or non-periodic (value :val: 0 ). Note: the elements in this list each refer to the direction of the corresponding entry in property lattice_vectors and not the Cartesian x, y, z directions. - Type : list of integers. - Requirements/Conventions : Support : SHOULD be supported, i.e., SHOULD NOT be :val: null . Is REQUIRED in this implementation, i.e., MUST NOT be :val: null . Query : MUST be a queryable property. Support for equality comparison is REQUIRED, support for other comparison operators are OPTIONAL. MUST be a list of length 3. Each integer element MUST assume only the value 0 or 1. Examples : For a molecule: :val: [0, 0, 0] For a wire along the direction specified by the third lattice vector: :val: [0, 0, 1] For a 2D surface/slab, periodic on the plane defined by the first and third lattice vectors: :val: [1, 0, 1] For a bulk 3D system: :val: [1, 1, 1] elements: str field pydantic required \u00b6 Names of the different elements present in the structure. - Type : list of strings. - Requirements/Conventions : Support : SHOULD be supported, i.e., SHOULD NOT be :val: null . Is REQUIRED in this implementation, i.e., MUST NOT be :val: null . Query : MUST be a queryable property with support for all mandatory filter operators. The strings are the chemical symbols, written as uppercase letter plus optional lowercase letters. The order MUST be alphabetical. Note: This may not contain the \"x\" that is suggested in chemical_symbols for the :property: species property. Examples : :val: [\"Si\"] :val: [\"Al\",\"O\",\"Si\"] Query examples : A filter that matches all records of structures that contain Si, Al and O, and possibly other elements: :filter: elements HAS ALL \"Si\", \"Al\", \"O\" . To match structures with exactly these three elements, use :filter: elements HAS ALL \"Si\", \"Al\", \"O\" AND LENGTH elements = 3 . elements_ratios: float field pydantic required \u00b6 Relative proportions of different elements in the structure. - Type : list of floats - Requirements/Conventions : Support : SHOULD be supported, i.e., SHOULD NOT be :val: null . Is REQUIRED in this implementation, i.e., MUST NOT be :val: null . Query : MUST be a queryable property with support for all mandatory filter operators. Composed by the proportions of elements in the structure as a list of floating point numbers. The sum of the numbers MUST be 1.0 (within floating point accuracy) Examples : :val: [1.0] :val: [0.3333333333333333, 0.2222222222222222, 0.4444444444444444] Query examples : Note: useful filters can be formulated using the set operator syntax for correlated values. However, since the values are floating point values, the use of equality comparisons is generally not recommended. A filter that matches structures where approximately 1/3 of the atoms in the structure are the element Al is: :filter: elements:elements_ratios HAS ALL \"Al\":>0.3333, \"Al\":<0.3334 . immutable_id: str field pydantic \u00b6 The entry's immutable ID (e.g., an UUID). This is important for databases having preferred IDs that point to \"the latest version\" of a record, but still offer access to older variants. This ID maps to the version-specific record, in case it changes in the future. - Type : string. - Requirements/Conventions : Support : OPTIONAL, i.e., MAY be :val: null . Query : MUST be a queryable property with support for all mandatory filter features. Examples : :val: \"8bd3e750-b477-41a0-9b11-3a799f21b44f\" :val: \"fjeiwoj,54;@=%<>#32\" (Strings that are not URL-safe are allowed.) last_modified: datetime field pydantic required \u00b6 Date and time representing when the entry was last modified. - Type : timestamp. - Requirements/Conventions : Support : SHOULD be supported, i.e., SHOULD NOT be :val: null . Is REQUIRED in this implementation, i.e., MUST NOT be :val: null . Query : MUST be a queryable property with support for all mandatory filter features. Response : REQUIRED in the response unless the query parameter :query-param: response_fields is present and does not include this property. Example : As part of JSON response format: :VAL: \"2007-04-05T14:30Z\" (i.e., encoded as an RFC 3339 Internet Date/Time Format <https://tools.ietf.org/html/rfc3339#section-5.6> __ string.) lattice_vectors: Tuple [ Tuple [ Optional [ Union [ float , NoneType ], Union [ float , NoneType ], Union [ float , NoneType ]], Tuple [ Union [ float , NoneType ], Union [ float , NoneType ], Union [ float , NoneType ]], Tuple [ Union [ float , NoneType ], Union [ float , NoneType ], Union [ float ]]]] field pydantic \u00b6 The three lattice vectors in Cartesian coordinates, in \u00e5ngstr\u00f6m (\u00c5). - Type : list of list of floats. - Requirements/Conventions : Support : SHOULD be supported, i.e., SHOULD NOT be :val: null . Is REQUIRED in this implementation, i.e., MUST NOT be :val: null . Query : Support for queries on this property is OPTIONAL. If supported, filters MAY support only a subset of comparison operators. MUST be a list of three vectors a , b , and c , where each of the vectors MUST BE a list of the vector's coordinates along the x, y, and z Cartesian coordinates. (Therefore, the first index runs over the three lattice vectors and the second index runs over the x, y, z Cartesian coordinates). For databases that do not define an absolute Cartesian system (e.g., only defining the length and angles between vectors), the first lattice vector SHOULD be set along x and the second on the xy -plane. This property MUST be an array of dimensions 3 times 3 regardless of the elements of :property: dimension_types . The vectors SHOULD by convention be chosen so the determinant of the :property: lattice_vectors matrix is different from zero. The vectors in the non-periodic directions have no significance beyond fulfilling these requirements. All three elements of the inner lists of floats MAY be :val: null for non-periodic dimensions, i.e., those dimensions for which :property: dimension_types is :val: 0 . Examples : :val: [[4.0,0.0,0.0],[0.0,4.0,0.0],[0.0,1.0,4.0]] represents a cell, where the first vector is :val: (4, 0, 0) , i.e., a vector aligned along the :val: x axis of length 4 \u00c5; the second vector is :val: (0, 4, 0) ; and the third vector is :val: (0, 1, 4) . nelements: int field pydantic required \u00b6 Number of different elements in the structure as an integer. - Type : integer - Requirements/Conventions : Support : SHOULD be supported, i.e., SHOULD NOT be :val: null . Is REQUIRED in this implementation, i.e., MUST NOT be :val: null . Query : MUST be a queryable property with support for all mandatory filter operators. Example : :val: 3 Querying : Note: queries on this property can equivalently be formulated using :filter-fragment: LENGTH elements . A filter that matches structures that have exactly 4 elements: :filter: nelements=4 . A filter that matches structures that have between 2 and 7 elements: :filter: nelements>=2 AND nelements<=7 . nsites: int field pydantic required \u00b6 An integer specifying the length of the :property: cartesian_site_positions property. - Type : integer - Requirements/Conventions : Support : SHOULD be supported, i.e., SHOULD NOT be :val: null . Is REQUIRED in this implementation, i.e., MUST NOT be :val: null . Query : MUST be a queryable property with support for all mandatory filter operators. Examples : :val: 42 Query examples : Match only structures with exactly 4 sites: :filter: nsites=4 Match structures that have between 2 and 7 sites: :filter: nsites>=2 AND nsites<=7 species: Species field pydantic required \u00b6 A list describing the species of the sites of this structure. Species can be pure chemical elements, or virtual-crystal atoms representing a statistical occupation of a given site by multiple chemical elements. - Type : list of dictionary with keys: :property: name : string (REQUIRED) :property: chemical_symbols : list of strings (REQUIRED) :property: concentration : list of float (REQUIRED) :property: mass : float (OPTIONAL) :property: original_name : string (OPTIONAL). Requirements/Conventions : Support : SHOULD be supported, i.e., SHOULD NOT be :val: null . Is REQUIRED in this implementation, i.e., MUST NOT be :val: null . Query : Support for queries on this property is OPTIONAL. If supported, filters MAY support only a subset of comparison operators. Each list member MUST be a dictionary with the following keys: name : REQUIRED; gives the name of the species; the name value MUST be unique in the :property: species list; chemical_symbols : REQUIRED; MUST be a list of strings of all chemical elements composing this species. It MUST be one of the following: a valid chemical-element name, or the special value :val: \"X\" to represent a non-chemical element, or the special value :val: \"vacancy\" to represent that this site has a non-zero probability of having a vacancy (the respective probability is indicated in the :property: concentration list, see below). If any one entry in the :property: species list has a :property: chemical_symbols list that is longer than 1 element, the correct flag MUST be set in the list :property: structure_features (see property structure_features _). concentration : REQUIRED; MUST be a list of floats, with same length as :property: chemical_symbols . The numbers represent the relative concentration of the corresponding chemical symbol in this species. The numbers SHOULD sum to one. Cases in which the numbers do not sum to one typically fall only in the following two categories: Numerical errors when representing float numbers in fixed precision, e.g. for two chemical symbols with concentrations :val: 1/3 and :val: 2/3 , the concentration might look something like :val: [0.33333333333, 0.66666666666] . If the client is aware that the sum is not one because of numerical precision, it can renormalize the values so that the sum is exactly one. Experimental errors in the data present in the database. In this case, it is the responsibility of the client to decide how to process the data. Note that concentrations are uncorrelated between different site (even of the same species). mass : OPTIONAL. If present MUST be a float expressed in a.m.u. original_name : OPTIONAL. Can be any valid Unicode string, and SHOULD contain (if specified) the name of the species that is used internally in the source database. With regards to \"source database\", we refer to the immediate source being queried via the OPTIMADE API implementation. The main use of this field is for source databases that use species names, containing characters that are not allowed (see description of the list property species_at_sites _). For systems that have only species formed by a single chemical symbol, and that have at most one species per chemical symbol, SHOULD use the chemical symbol as species name (e.g., :val: \"Ti\" for titanium, :val: \"O\" for oxygen, etc.) However, note that this is OPTIONAL, and client implementations MUST NOT assume that the key corresponds to a chemical symbol, nor assume that if the species name is a valid chemical symbol, that it represents a species with that chemical symbol. This means that a species :val: {\"name\": \"C\", \"chemical_symbols\": [\"Ti\"], \"concentration\": [1.0]} is valid and represents a titanium species (and not a carbon species). It is NOT RECOMMENDED that a structure includes species that do not have at least one corresponding site. Examples : :val: [ {\"name\": \"Ti\", \"chemical_symbols\": [\"Ti\"], \"concentration\": [1.0]} ] : any site with this species is occupied by a Ti atom. :val: [ {\"name\": \"Ti\", \"chemical_symbols\": [\"Ti\", \"vacancy\"], \"concentration\": [0.9, 0.1]} ] : any site with this species is occupied by a Ti atom with 90 % probability, and has a vacancy with 10 % probability. :val: [ {\"name\": \"BaCa\", \"chemical_symbols\": [\"vacancy\", \"Ba\", \"Ca\"], \"concentration\": [0.05, 0.45, 0.5], \"mass\": 88.5} ] : any site with this species is occupied by a Ba atom with 45 % probability, a Ca atom with 50 % probability, and by a vacancy with 5 % probability. The mass of this site is (on average) 88.5 a.m.u. :val: [ {\"name\": \"C12\", \"chemical_symbols\": [\"C\"], \"concentration\": [1.0], \"mass\": 12.0} ] : any site with this species is occupied by a carbon isotope with mass 12. :val: [ {\"name\": \"C13\", \"chemical_symbols\": [\"C\"], \"concentration\": [1.0], \"mass\": 13.0} ] : any site with this species is occupied by a carbon isotope with mass 13. species_at_sites: str field pydantic required \u00b6 Name of the species at each site (where values for sites are specified with the same order of the property cartesian_site_positions ). The properties of the species are found in the property species . - Type : list of strings. - Requirements/Conventions : Support : SHOULD be supported, i.e., SHOULD NOT be :val: null . Is REQUIRED in this implementation, i.e., MUST NOT be :val: null . Query : Support for queries on this property is OPTIONAL. If supported, filters MAY support only a subset of comparison operators. MUST have length equal to the number of sites in the structure (first dimension of the list property cartesian_site_positions _). Each species MUST have a unique name. Each species name mentioned in the :property: species_at_sites list MUST be described in the list property species _ (i.e. for each value in the :property: species_at_sites list there MUST exist exactly one dictionary in the :property: species list with the :property: name attribute equal to the corresponding :property: species_at_sites value). Each site MUST be associated only to a single species. Note : However, species can represent mixtures of atoms, and multiple species MAY be defined for the same chemical element. This latter case is useful when different atoms of the same type need to be grouped or distinguished, for instance in simulation codes to assign different initial spin states. Examples : :val: [\"Ti\",\"O2\"] indicates that the first site is hosting a species labeled :val: \"Ti\" and the second a species labeled :val: \"O2\" . structure_features: str field pydantic required \u00b6 A list of strings that flag which special features are used by the structure. - Type : list of strings - Requirements/Conventions : Support : REQUIRED, MUST NOT be :val: null . Query : MUST be a queryable property. Filters on the list MUST support all mandatory HAS-type queries. Filter operators for comparisons on the string components MUST support equality, support for other comparison operators are OPTIONAL. MUST be an empty list if no special features are used. MUST be sorted alphabetically. If a special feature listed below is used, the list MUST contain the corresponding string. If a special feature listed below is not used, the list MUST NOT contain the corresponding string. List of strings used to indicate special structure features : :val: disorder : This flag MUST be present if any one entry in the :property: species list has a :property: chemical_symbols list that is longer than 1 element. :val: unknown_positions : This flag MUST be present if at least one component of the :property: cartesian_site_positions list of lists has value :val: null . :val: assemblies : This flag MUST be present if the property assemblies _ is present. Examples : A structure having unknown positions and using assemblies: :val: [\"assemblies\", \"unknown_positions\"]","title":"Models"},{"location":"reference/models/#optimade.models","text":"","title":"optimade.models"},{"location":"reference/models/#optimade.models.baseinfo","text":"","title":"baseinfo"},{"location":"reference/models/#optimade.models.baseinfo.AvailableApiVersion","text":"A JSON object containing information about an available API version","title":"AvailableApiVersion"},{"location":"reference/models/#optimade.models.baseinfo.AvailableApiVersion.url","text":"a string specifying a versioned base URL that MUST adhere to the rules in section Base URL","title":"url"},{"location":"reference/models/#optimade.models.baseinfo.AvailableApiVersion.version","text":"a string containing the full version number of the API served at that versioned base URL. The version number string MUST NOT be prefixed by, e.g., 'v'.","title":"version"},{"location":"reference/models/#optimade.models.baseinfo.AvailableApiVersion.crosscheck_url_and_version","text":"Check that URL version and API version are compatible. Source code in optimade/models/baseinfo.py 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 @root_validator ( pre = False , skip_on_failure = True ) def crosscheck_url_and_version ( cls , values ): \"\"\" Check that URL version and API version are compatible. \"\"\" url_version = ( values [ \"url\" ] . split ( \"/\" )[ - 2 if values [ \"url\" ] . endswith ( \"/\" ) else - 1 ] . replace ( \"v\" , \"\" ) ) url_version = tuple ( int ( val ) for val in url_version . split ( \".\" )) api_version = tuple ( int ( val ) for val in values [ \"version\" ] . split ( \".\" )) if any ( a != b for a , b in zip ( url_version , api_version )): raise ValueError ( f \"API version { api_version } is not compatible with url version { url_version } .\" ) return values","title":"crosscheck_url_and_version()"},{"location":"reference/models/#optimade.models.baseinfo.AvailableApiVersion.url_must_be_versioned_base_url","text":"The URL must be a valid versioned Base URL Source code in optimade/models/baseinfo.py 29 30 31 32 33 34 @validator ( \"url\" ) def url_must_be_versioned_base_url ( cls , v ): \"\"\"The URL must be a valid versioned Base URL\"\"\" if not re . match ( r \".+/v[0-1](\\.[0-9]+)*/?$\" , v ): raise ValueError ( f \"url MUST be a versioned base URL. It is: { v } \" ) return v","title":"url_must_be_versioned_base_url()"},{"location":"reference/models/#optimade.models.baseinfo.BaseInfoAttributes","text":"Attributes for Base URL Info endpoint","title":"BaseInfoAttributes"},{"location":"reference/models/#optimade.models.baseinfo.BaseInfoAttributes.api_version","text":"Presently used version of the OPTIMADE API","title":"api_version"},{"location":"reference/models/#optimade.models.baseinfo.BaseInfoAttributes.available_api_versions","text":"A list of dictionaries of available API versions at other base URLs","title":"available_api_versions"},{"location":"reference/models/#optimade.models.baseinfo.BaseInfoAttributes.available_endpoints","text":"List of available endpoints (i.e., the string to be appended to the versioned base URL).","title":"available_endpoints"},{"location":"reference/models/#optimade.models.baseinfo.BaseInfoAttributes.entry_types_by_format","text":"Available entry endpoints as a function of output formats.","title":"entry_types_by_format"},{"location":"reference/models/#optimade.models.baseinfo.BaseInfoAttributes.formats","text":"List of available output formats.","title":"formats"},{"location":"reference/models/#optimade.models.baseinfo.BaseInfoAttributes.is_index","text":"If true, this is an index meta-database base URL (see section Index Meta-Database). If this member is not provided, the client MUST assume this is not an index meta-database base URL (i.e., the default is for is_index to be false).","title":"is_index"},{"location":"reference/models/#optimade.models.baseinfo.BaseInfoResource","text":"","title":"BaseInfoResource"},{"location":"reference/models/#optimade.models.baseinfo.BaseInfoResource.links","text":"a links object containing links related to the resource.","title":"links"},{"location":"reference/models/#optimade.models.baseinfo.BaseInfoResource.meta","text":"a meta object containing non-standard meta-information about a resource that can not be represented as an attribute or relationship.","title":"meta"},{"location":"reference/models/#optimade.models.baseinfo.BaseInfoResource.relationships","text":"a relationships object describing relationships between the resource and other JSON:API resources.","title":"relationships"},{"location":"reference/models/#optimade.models.entries","text":"","title":"entries"},{"location":"reference/models/#optimade.models.entries.EntryInfoProperty","text":"","title":"EntryInfoProperty"},{"location":"reference/models/#optimade.models.entries.EntryInfoProperty.description","text":"description of the entry property","title":"description"},{"location":"reference/models/#optimade.models.entries.EntryInfoProperty.sortable","text":"defines whether the entry property can be used for sorting with the \"sort\" parameter. If the entry listing endpoint supports sorting, this key MUST be present for sortable properties with value true .","title":"sortable"},{"location":"reference/models/#optimade.models.entries.EntryInfoProperty.unit","text":"the physical unit of the entry property","title":"unit"},{"location":"reference/models/#optimade.models.entries.EntryInfoResource","text":"","title":"EntryInfoResource"},{"location":"reference/models/#optimade.models.entries.EntryInfoResource.description","text":"description of the entry","title":"description"},{"location":"reference/models/#optimade.models.entries.EntryInfoResource.formats","text":"list of available output formats.","title":"formats"},{"location":"reference/models/#optimade.models.entries.EntryInfoResource.output_fields_by_format","text":"a dictionary of available output fields for this entry type, where the keys are the values of the formats list and the values are the keys of the properties dictionary.","title":"output_fields_by_format"},{"location":"reference/models/#optimade.models.entries.EntryInfoResource.properties","text":"a dictionary describing queryable properties for this entry type, where each key is a property ID.","title":"properties"},{"location":"reference/models/#optimade.models.entries.EntryRelationships","text":"This model wraps the JSON API Relationships to include type-specific top level keys.","title":"EntryRelationships"},{"location":"reference/models/#optimade.models.entries.EntryRelationships.references","text":"Object containing links to relationships with entries of the references type.","title":"references"},{"location":"reference/models/#optimade.models.entries.EntryRelationships.structures","text":"Object containing links to relationships with entries of the structures type.","title":"structures"},{"location":"reference/models/#optimade.models.entries.EntryResource","text":"","title":"EntryResource"},{"location":"reference/models/#optimade.models.entries.EntryResource.attributes","text":"a dictionary, containing key-value pairs representing the entry's properties, except for type and id. Database-provider-specific properties need to include the database-provider-specific prefix (see appendix Database-Provider-Specific Namespace Prefixes _).","title":"attributes"},{"location":"reference/models/#optimade.models.entries.EntryResource.id","text":"An entry's ID as defined in section Definition of Terms _. - Type : string. - Requirements/Conventions : Support : REQUIRED, MUST NOT be :val: null . Query : MUST be a queryable property with support for all mandatory filter features. Response : REQUIRED in the response. See section Definition of Terms _. Examples : :val: \"db/1234567\" :val: \"cod/2000000\" :val: \"cod/2000000@1234567\" :val: \"nomad/L1234567890\" :val: \"42\"","title":"id"},{"location":"reference/models/#optimade.models.entries.EntryResource.links","text":"a links object containing links related to the resource.","title":"links"},{"location":"reference/models/#optimade.models.entries.EntryResource.meta","text":"a meta object containing non-standard meta-information about a resource that can not be represented as an attribute or relationship.","title":"meta"},{"location":"reference/models/#optimade.models.entries.EntryResource.relationships","text":"a dictionary containing references to other entries according to the description in section Relationships _ encoded as JSON API Relationships <https://jsonapi.org/format/1.0/#document-resource-object-relationships> __. The OPTIONAL human-readable description of the relationship MAY be provided in the :field: description field inside the :field: meta dictionary.","title":"relationships"},{"location":"reference/models/#optimade.models.entries.EntryResource.type","text":"The name of the type of an entry. - Type : string. - Requirements/Conventions : Support : REQUIRED, MUST NOT be :val: null . Query : MUST be a queryable property with support for all mandatory filter features. Response : REQUIRED in the response. MUST be an existing entry type. The entry of type <type> and ID <id> MUST be returned in response to a request for :endpoint: /<type>/<id> under the versioned base URL. Example : :val: \"structures\"","title":"type"},{"location":"reference/models/#optimade.models.entries.EntryResourceAttributes","text":"Contains key-value pairs representing the entry's properties.","title":"EntryResourceAttributes"},{"location":"reference/models/#optimade.models.entries.EntryResourceAttributes.immutable_id","text":"The entry's immutable ID (e.g., an UUID). This is important for databases having preferred IDs that point to \"the latest version\" of a record, but still offer access to older variants. This ID maps to the version-specific record, in case it changes in the future. - Type : string. - Requirements/Conventions : Support : OPTIONAL, i.e., MAY be :val: null . Query : MUST be a queryable property with support for all mandatory filter features. Examples : :val: \"8bd3e750-b477-41a0-9b11-3a799f21b44f\" :val: \"fjeiwoj,54;@=%<>#32\" (Strings that are not URL-safe are allowed.)","title":"immutable_id"},{"location":"reference/models/#optimade.models.entries.EntryResourceAttributes.last_modified","text":"Date and time representing when the entry was last modified. - Type : timestamp. - Requirements/Conventions : Support : SHOULD be supported, i.e., SHOULD NOT be :val: null . Is REQUIRED in this implementation, i.e., MUST NOT be :val: null . Query : MUST be a queryable property with support for all mandatory filter features. Response : REQUIRED in the response unless the query parameter :query-param: response_fields is present and does not include this property. Example : As part of JSON response format: :VAL: \"2007-04-05T14:30Z\" (i.e., encoded as an RFC 3339 Internet Date/Time Format <https://tools.ietf.org/html/rfc3339#section-5.6> __ string.)","title":"last_modified"},{"location":"reference/models/#optimade.models.entries.ReferenceRelationship","text":"","title":"ReferenceRelationship"},{"location":"reference/models/#optimade.models.entries.ReferenceRelationship.data","text":"Resource linkage","title":"data"},{"location":"reference/models/#optimade.models.entries.ReferenceRelationship.links","text":"a links object containing at least one of the following: self, related","title":"links"},{"location":"reference/models/#optimade.models.entries.ReferenceRelationship.meta","text":"a meta object that contains non-standard meta-information about the relationship.","title":"meta"},{"location":"reference/models/#optimade.models.entries.StructureRelationship","text":"","title":"StructureRelationship"},{"location":"reference/models/#optimade.models.entries.StructureRelationship.data","text":"Resource linkage","title":"data"},{"location":"reference/models/#optimade.models.entries.StructureRelationship.links","text":"a links object containing at least one of the following: self, related","title":"links"},{"location":"reference/models/#optimade.models.entries.StructureRelationship.meta","text":"a meta object that contains non-standard meta-information about the relationship.","title":"meta"},{"location":"reference/models/#optimade.models.entries.TypedRelationship","text":"","title":"TypedRelationship"},{"location":"reference/models/#optimade.models.entries.TypedRelationship.data","text":"Resource linkage","title":"data"},{"location":"reference/models/#optimade.models.entries.TypedRelationship.links","text":"a links object containing at least one of the following: self, related","title":"links"},{"location":"reference/models/#optimade.models.entries.TypedRelationship.meta","text":"a meta object that contains non-standard meta-information about the relationship.","title":"meta"},{"location":"reference/models/#optimade.models.index_metadb","text":"","title":"index_metadb"},{"location":"reference/models/#optimade.models.index_metadb.IndexInfoAttributes","text":"Attributes for Base URL Info endpoint for an Index Meta-Database","title":"IndexInfoAttributes"},{"location":"reference/models/#optimade.models.index_metadb.IndexInfoAttributes.api_version","text":"Presently used version of the OPTIMADE API","title":"api_version"},{"location":"reference/models/#optimade.models.index_metadb.IndexInfoAttributes.available_api_versions","text":"A list of dictionaries of available API versions at other base URLs","title":"available_api_versions"},{"location":"reference/models/#optimade.models.index_metadb.IndexInfoAttributes.available_endpoints","text":"List of available endpoints (i.e., the string to be appended to the versioned base URL).","title":"available_endpoints"},{"location":"reference/models/#optimade.models.index_metadb.IndexInfoAttributes.entry_types_by_format","text":"Available entry endpoints as a function of output formats.","title":"entry_types_by_format"},{"location":"reference/models/#optimade.models.index_metadb.IndexInfoAttributes.formats","text":"List of available output formats.","title":"formats"},{"location":"reference/models/#optimade.models.index_metadb.IndexInfoAttributes.is_index","text":"If true, this is an index meta-database base URL (see section Index Meta-Database). If this member is not provided, the client MUST assume this is not an index meta-database base URL (i.e., the default is for is_index to be false).","title":"is_index"},{"location":"reference/models/#optimade.models.index_metadb.IndexInfoResource","text":"Index Meta-Database Base URL Info enpoint resource","title":"IndexInfoResource"},{"location":"reference/models/#optimade.models.index_metadb.IndexInfoResource.links","text":"a links object containing links related to the resource.","title":"links"},{"location":"reference/models/#optimade.models.index_metadb.IndexInfoResource.meta","text":"a meta object containing non-standard meta-information about a resource that can not be represented as an attribute or relationship.","title":"meta"},{"location":"reference/models/#optimade.models.index_metadb.IndexInfoResource.relationships","text":"Reference to the child identifier object under the links endpoint that the provider has chosen as their 'default' OPTIMADE API database. A client SHOULD present this database as the first choice when an end-user chooses this provider.","title":"relationships"},{"location":"reference/models/#optimade.models.index_metadb.IndexRelationship","text":"Index Meta-Database relationship","title":"IndexRelationship"},{"location":"reference/models/#optimade.models.index_metadb.IndexRelationship.data","text":"JSON API resource linkage. It MUST be either null or contain a single child identifier object with the fields 'id' and 'type'","title":"data"},{"location":"reference/models/#optimade.models.index_metadb.RelatedChildResource","text":"Keep only type and id of a ChildResource","title":"RelatedChildResource"},{"location":"reference/models/#optimade.models.index_metadb.RelatedChildResource.id","text":"Resource ID","title":"id"},{"location":"reference/models/#optimade.models.jsonapi","text":"This module should reproduce JSON API v1.0 https://jsonapi.org/format/1.0/","title":"jsonapi"},{"location":"reference/models/#optimade.models.jsonapi.Attributes","text":"Members of the attributes object (\"attributes\") represent information about the resource object in which it's defined. The keys for Attributes MUST NOT be: relationships links id type","title":"Attributes"},{"location":"reference/models/#optimade.models.jsonapi.BaseResource","text":"Minimum requirements to represent a Resource","title":"BaseResource"},{"location":"reference/models/#optimade.models.jsonapi.BaseResource.id","text":"Resource ID","title":"id"},{"location":"reference/models/#optimade.models.jsonapi.BaseResource.type","text":"Resource type","title":"type"},{"location":"reference/models/#optimade.models.jsonapi.Error","text":"An error response","title":"Error"},{"location":"reference/models/#optimade.models.jsonapi.Error.code","text":"an application-specific error code, expressed as a string value.","title":"code"},{"location":"reference/models/#optimade.models.jsonapi.Error.detail","text":"A human-readable explanation specific to this occurrence of the problem.","title":"detail"},{"location":"reference/models/#optimade.models.jsonapi.Error.id","text":"A unique identifier for this particular occurrence of the problem.","title":"id"},{"location":"reference/models/#optimade.models.jsonapi.Error.links","text":"A links object storing about","title":"links"},{"location":"reference/models/#optimade.models.jsonapi.Error.meta","text":"a meta object containing non-standard meta-information about the error.","title":"meta"},{"location":"reference/models/#optimade.models.jsonapi.Error.source","text":"An object containing references to the source of the error","title":"source"},{"location":"reference/models/#optimade.models.jsonapi.Error.status","text":"the HTTP status code applicable to this problem, expressed as a string value.","title":"status"},{"location":"reference/models/#optimade.models.jsonapi.Error.title","text":"A short, human-readable summary of the problem. It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.","title":"title"},{"location":"reference/models/#optimade.models.jsonapi.Error.__hash__","text":"Return hash(self). Source code in optimade/models/jsonapi.py 127 128 def __hash__ ( self ): return hash ( self . json ())","title":"__hash__()"},{"location":"reference/models/#optimade.models.jsonapi.ErrorLinks","text":"A Links object specific to Error objects","title":"ErrorLinks"},{"location":"reference/models/#optimade.models.jsonapi.ErrorLinks.about","text":"A link that leads to further details about this particular occurrence of the problem.","title":"about"},{"location":"reference/models/#optimade.models.jsonapi.ErrorSource","text":"an object containing references to the source of the error","title":"ErrorSource"},{"location":"reference/models/#optimade.models.jsonapi.ErrorSource.parameter","text":"a string indicating which URI query parameter caused the error.","title":"parameter"},{"location":"reference/models/#optimade.models.jsonapi.ErrorSource.pointer","text":"a JSON Pointer [RFC6901] to the associated entity in the request document [e.g. \"/data\" for a primary data object, or \"/data/attributes/title\" for a specific attribute].","title":"pointer"},{"location":"reference/models/#optimade.models.jsonapi.JsonApi","text":"An object describing the server's implementation","title":"JsonApi"},{"location":"reference/models/#optimade.models.jsonapi.JsonApi.meta","text":"Non-standard meta information","title":"meta"},{"location":"reference/models/#optimade.models.jsonapi.JsonApi.version","text":"Version of the json API used","title":"version"},{"location":"reference/models/#optimade.models.jsonapi.Link","text":"A link MUST be represented as either: a string containing the link's URL or a link object.","title":"Link"},{"location":"reference/models/#optimade.models.jsonapi.Link.href","text":"a string containing the link\u2019s URL.","title":"href"},{"location":"reference/models/#optimade.models.jsonapi.Link.meta","text":"a meta object containing non-standard meta-information about the link.","title":"meta"},{"location":"reference/models/#optimade.models.jsonapi.Meta","text":"Non-standard meta-information that can not be represented as an attribute or relationship.","title":"Meta"},{"location":"reference/models/#optimade.models.jsonapi.Relationship","text":"Representation references from the resource object in which it\u2019s defined to other resource objects.","title":"Relationship"},{"location":"reference/models/#optimade.models.jsonapi.Relationship.data","text":"Resource linkage","title":"data"},{"location":"reference/models/#optimade.models.jsonapi.Relationship.links","text":"a links object containing at least one of the following: self, related","title":"links"},{"location":"reference/models/#optimade.models.jsonapi.Relationship.meta","text":"a meta object that contains non-standard meta-information about the relationship.","title":"meta"},{"location":"reference/models/#optimade.models.jsonapi.RelationshipLinks","text":"A resource object MAY contain references to other resource objects (\"relationships\"). Relationships may be to-one or to-many. Relationships can be specified by including a member in a resource's links object.","title":"RelationshipLinks"},{"location":"reference/models/#optimade.models.jsonapi.RelationshipLinks.related","text":"A related resource link","title":"related"},{"location":"reference/models/#optimade.models.jsonapi.RelationshipLinks.self","text":"A link to itself","title":"self"},{"location":"reference/models/#optimade.models.jsonapi.Relationships","text":"Members of the relationships object (\"relationships\") represent references from the resource object in which it's defined to other resource objects. Keys MUST NOT be: type id","title":"Relationships"},{"location":"reference/models/#optimade.models.jsonapi.Resource","text":"Resource objects appear in a JSON:API document to represent resources.","title":"Resource"},{"location":"reference/models/#optimade.models.jsonapi.Resource.attributes","text":"an attributes object representing some of the resource\u2019s data.","title":"attributes"},{"location":"reference/models/#optimade.models.jsonapi.Resource.id","text":"Resource ID","title":"id"},{"location":"reference/models/#optimade.models.jsonapi.Resource.links","text":"a links object containing links related to the resource.","title":"links"},{"location":"reference/models/#optimade.models.jsonapi.Resource.meta","text":"a meta object containing non-standard meta-information about a resource that can not be represented as an attribute or relationship.","title":"meta"},{"location":"reference/models/#optimade.models.jsonapi.Resource.relationships","text":"a relationships object describing relationships between the resource and other JSON:API resources.","title":"relationships"},{"location":"reference/models/#optimade.models.jsonapi.Resource.type","text":"Resource type","title":"type"},{"location":"reference/models/#optimade.models.jsonapi.ResourceLinks","text":"A Resource Links object","title":"ResourceLinks"},{"location":"reference/models/#optimade.models.jsonapi.ResourceLinks.self","text":"A link that identifies the resource represented by the resource object.","title":"self"},{"location":"reference/models/#optimade.models.jsonapi.Response","text":"A top-level response","title":"Response"},{"location":"reference/models/#optimade.models.jsonapi.Response.data","text":"Outputted Data","title":"data"},{"location":"reference/models/#optimade.models.jsonapi.Response.errors","text":"A list of unique errors","title":"errors"},{"location":"reference/models/#optimade.models.jsonapi.Response.included","text":"A list of unique included resources","title":"included"},{"location":"reference/models/#optimade.models.jsonapi.Response.jsonapi","text":"Information about the JSON API used","title":"jsonapi"},{"location":"reference/models/#optimade.models.jsonapi.Response.links","text":"Links associated with the primary data or errors","title":"links"},{"location":"reference/models/#optimade.models.jsonapi.Response.meta","text":"A meta object containing non-standard information related to the Success","title":"meta"},{"location":"reference/models/#optimade.models.jsonapi.ToplevelLinks","text":"A set of Links objects, possibly including pagination","title":"ToplevelLinks"},{"location":"reference/models/#optimade.models.jsonapi.ToplevelLinks.first","text":"The first page of data","title":"first"},{"location":"reference/models/#optimade.models.jsonapi.ToplevelLinks.last","text":"The last page of data","title":"last"},{"location":"reference/models/#optimade.models.jsonapi.ToplevelLinks.next","text":"The next page of data","title":"next"},{"location":"reference/models/#optimade.models.jsonapi.ToplevelLinks.prev","text":"The previous page of data","title":"prev"},{"location":"reference/models/#optimade.models.jsonapi.ToplevelLinks.related","text":"A related resource link","title":"related"},{"location":"reference/models/#optimade.models.jsonapi.ToplevelLinks.self","text":"A link to itself","title":"self"},{"location":"reference/models/#optimade.models.links","text":"","title":"links"},{"location":"reference/models/#optimade.models.links.ChildResource","text":"A child object representing a link to an implementation exactly one layer below the current implementation","title":"ChildResource"},{"location":"reference/models/#optimade.models.links.ChildResource.attributes","text":"a dictionary containing key-value pairs representing the entry's properties.","title":"attributes"},{"location":"reference/models/#optimade.models.links.ChildResource.id","text":"An entry's ID as defined in section Definition of Terms _. - Type : string. - Requirements/Conventions : Support : REQUIRED, MUST NOT be :val: null . Query : MUST be a queryable property with support for all mandatory filter features. Response : REQUIRED in the response. See section Definition of Terms _. Examples : :val: \"db/1234567\" :val: \"cod/2000000\" :val: \"cod/2000000@1234567\" :val: \"nomad/L1234567890\" :val: \"42\"","title":"id"},{"location":"reference/models/#optimade.models.links.ChildResource.links","text":"a links object containing links related to the resource.","title":"links"},{"location":"reference/models/#optimade.models.links.ChildResource.meta","text":"a meta object containing non-standard meta-information about a resource that can not be represented as an attribute or relationship.","title":"meta"},{"location":"reference/models/#optimade.models.links.ChildResource.relationships","text":"a dictionary containing references to other entries according to the description in section Relationships _ encoded as JSON API Relationships <https://jsonapi.org/format/1.0/#document-resource-object-relationships> __. The OPTIONAL human-readable description of the relationship MAY be provided in the :field: description field inside the :field: meta dictionary.","title":"relationships"},{"location":"reference/models/#optimade.models.links.LinksResource","text":"A Links endpoint resource object","title":"LinksResource"},{"location":"reference/models/#optimade.models.links.LinksResource.attributes","text":"a dictionary containing key-value pairs representing the entry's properties.","title":"attributes"},{"location":"reference/models/#optimade.models.links.LinksResource.id","text":"An entry's ID as defined in section Definition of Terms _. - Type : string. - Requirements/Conventions : Support : REQUIRED, MUST NOT be :val: null . Query : MUST be a queryable property with support for all mandatory filter features. Response : REQUIRED in the response. See section Definition of Terms _. Examples : :val: \"db/1234567\" :val: \"cod/2000000\" :val: \"cod/2000000@1234567\" :val: \"nomad/L1234567890\" :val: \"42\"","title":"id"},{"location":"reference/models/#optimade.models.links.LinksResource.links","text":"a links object containing links related to the resource.","title":"links"},{"location":"reference/models/#optimade.models.links.LinksResource.meta","text":"a meta object containing non-standard meta-information about a resource that can not be represented as an attribute or relationship.","title":"meta"},{"location":"reference/models/#optimade.models.links.LinksResource.relationships","text":"a dictionary containing references to other entries according to the description in section Relationships _ encoded as JSON API Relationships <https://jsonapi.org/format/1.0/#document-resource-object-relationships> __. The OPTIONAL human-readable description of the relationship MAY be provided in the :field: description field inside the :field: meta dictionary.","title":"relationships"},{"location":"reference/models/#optimade.models.links.LinksResource.type","text":"MUST be either \"parent\", \"child\", or \"provider\". These objects are described in detail in sections Parent and Child Objects and Provider Objects.","title":"type"},{"location":"reference/models/#optimade.models.links.LinksResourceAttributes","text":"Links endpoint resource object attributes","title":"LinksResourceAttributes"},{"location":"reference/models/#optimade.models.links.LinksResourceAttributes.base_url","text":"JSON API links object, pointing to the base URL for this implementation","title":"base_url"},{"location":"reference/models/#optimade.models.links.LinksResourceAttributes.description","text":"Human-readable description for the OPTIMADE API implementation a client may provide in a list to an end-user.","title":"description"},{"location":"reference/models/#optimade.models.links.LinksResourceAttributes.homepage","text":"JSON API links object, pointing to a homepage URL for this implementation","title":"homepage"},{"location":"reference/models/#optimade.models.links.LinksResourceAttributes.name","text":"Human-readable name for the OPTIMADE API implementation a client may provide in a list to an end-user.","title":"name"},{"location":"reference/models/#optimade.models.links.ParentResource","text":"A parent object representing a link to an implementation exactly one layer above the current implementation","title":"ParentResource"},{"location":"reference/models/#optimade.models.links.ParentResource.attributes","text":"a dictionary containing key-value pairs representing the entry's properties.","title":"attributes"},{"location":"reference/models/#optimade.models.links.ParentResource.id","text":"An entry's ID as defined in section Definition of Terms _. - Type : string. - Requirements/Conventions : Support : REQUIRED, MUST NOT be :val: null . Query : MUST be a queryable property with support for all mandatory filter features. Response : REQUIRED in the response. See section Definition of Terms _. Examples : :val: \"db/1234567\" :val: \"cod/2000000\" :val: \"cod/2000000@1234567\" :val: \"nomad/L1234567890\" :val: \"42\"","title":"id"},{"location":"reference/models/#optimade.models.links.ParentResource.links","text":"a links object containing links related to the resource.","title":"links"},{"location":"reference/models/#optimade.models.links.ParentResource.meta","text":"a meta object containing non-standard meta-information about a resource that can not be represented as an attribute or relationship.","title":"meta"},{"location":"reference/models/#optimade.models.links.ParentResource.relationships","text":"a dictionary containing references to other entries according to the description in section Relationships _ encoded as JSON API Relationships <https://jsonapi.org/format/1.0/#document-resource-object-relationships> __. The OPTIONAL human-readable description of the relationship MAY be provided in the :field: description field inside the :field: meta dictionary.","title":"relationships"},{"location":"reference/models/#optimade.models.links.ProviderResource","text":"A provider object representing a link to another index meta-database by another database provider","title":"ProviderResource"},{"location":"reference/models/#optimade.models.links.ProviderResource.attributes","text":"a dictionary containing key-value pairs representing the entry's properties.","title":"attributes"},{"location":"reference/models/#optimade.models.links.ProviderResource.id","text":"An entry's ID as defined in section Definition of Terms _. - Type : string. - Requirements/Conventions : Support : REQUIRED, MUST NOT be :val: null . Query : MUST be a queryable property with support for all mandatory filter features. Response : REQUIRED in the response. See section Definition of Terms _. Examples : :val: \"db/1234567\" :val: \"cod/2000000\" :val: \"cod/2000000@1234567\" :val: \"nomad/L1234567890\" :val: \"42\"","title":"id"},{"location":"reference/models/#optimade.models.links.ProviderResource.links","text":"a links object containing links related to the resource.","title":"links"},{"location":"reference/models/#optimade.models.links.ProviderResource.meta","text":"a meta object containing non-standard meta-information about a resource that can not be represented as an attribute or relationship.","title":"meta"},{"location":"reference/models/#optimade.models.links.ProviderResource.relationships","text":"a dictionary containing references to other entries according to the description in section Relationships _ encoded as JSON API Relationships <https://jsonapi.org/format/1.0/#document-resource-object-relationships> __. The OPTIONAL human-readable description of the relationship MAY be provided in the :field: description field inside the :field: meta dictionary.","title":"relationships"},{"location":"reference/models/#optimade.models.optimade_json","text":"Modified JSON API v1.0 for OPTIMADE API","title":"optimade_json"},{"location":"reference/models/#optimade.models.optimade_json.BaseRelationshipMeta","text":"Specific meta field for base relationship resource","title":"BaseRelationshipMeta"},{"location":"reference/models/#optimade.models.optimade_json.BaseRelationshipMeta.description","text":"OPTIONAL human-readable description of the relationship","title":"description"},{"location":"reference/models/#optimade.models.optimade_json.BaseRelationshipResource","text":"Minimum requirements to represent a relationship resource","title":"BaseRelationshipResource"},{"location":"reference/models/#optimade.models.optimade_json.BaseRelationshipResource.id","text":"Resource ID","title":"id"},{"location":"reference/models/#optimade.models.optimade_json.BaseRelationshipResource.meta","text":"Relationship meta field. MUST contain 'description' if supplied.","title":"meta"},{"location":"reference/models/#optimade.models.optimade_json.BaseRelationshipResource.type","text":"Resource type","title":"type"},{"location":"reference/models/#optimade.models.optimade_json.Implementation","text":"Information on the server implementation","title":"Implementation"},{"location":"reference/models/#optimade.models.optimade_json.Implementation.maintainer","text":"A dictionary providing details about the maintainer of the implementation.","title":"maintainer"},{"location":"reference/models/#optimade.models.optimade_json.Implementation.name","text":"name of the implementation","title":"name"},{"location":"reference/models/#optimade.models.optimade_json.Implementation.source_url","text":"URL of the implementation source, either downloadable archive or version control system","title":"source_url"},{"location":"reference/models/#optimade.models.optimade_json.Implementation.version","text":"version string of the current implementation","title":"version"},{"location":"reference/models/#optimade.models.optimade_json.ImplementationMaintainer","text":"Details about the maintainer of the implementation","title":"ImplementationMaintainer"},{"location":"reference/models/#optimade.models.optimade_json.ImplementationMaintainer.email","text":"the maintainer's email address","title":"email"},{"location":"reference/models/#optimade.models.optimade_json.OptimadeError","text":"detail MUST be present","title":"OptimadeError"},{"location":"reference/models/#optimade.models.optimade_json.OptimadeError.code","text":"an application-specific error code, expressed as a string value.","title":"code"},{"location":"reference/models/#optimade.models.optimade_json.OptimadeError.detail","text":"A human-readable explanation specific to this occurrence of the problem.","title":"detail"},{"location":"reference/models/#optimade.models.optimade_json.OptimadeError.id","text":"A unique identifier for this particular occurrence of the problem.","title":"id"},{"location":"reference/models/#optimade.models.optimade_json.OptimadeError.links","text":"A links object storing about","title":"links"},{"location":"reference/models/#optimade.models.optimade_json.OptimadeError.meta","text":"a meta object containing non-standard meta-information about the error.","title":"meta"},{"location":"reference/models/#optimade.models.optimade_json.OptimadeError.source","text":"An object containing references to the source of the error","title":"source"},{"location":"reference/models/#optimade.models.optimade_json.OptimadeError.status","text":"the HTTP status code applicable to this problem, expressed as a string value.","title":"status"},{"location":"reference/models/#optimade.models.optimade_json.OptimadeError.title","text":"A short, human-readable summary of the problem. It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.","title":"title"},{"location":"reference/models/#optimade.models.optimade_json.Provider","text":"Information on the database provider of the implementation.","title":"Provider"},{"location":"reference/models/#optimade.models.optimade_json.Provider.description","text":"a longer description of the database provider","title":"description"},{"location":"reference/models/#optimade.models.optimade_json.Provider.homepage","text":"a JSON API links object pointing to homepage of the database provider, either directly as a string, or as a link object.","title":"homepage"},{"location":"reference/models/#optimade.models.optimade_json.Provider.index_base_url","text":"a JSON API links object pointing to the base URL for the index meta-database as specified in Appendix 1, either directly as a string, or as a link object.","title":"index_base_url"},{"location":"reference/models/#optimade.models.optimade_json.Provider.name","text":"a short name for the database provider","title":"name"},{"location":"reference/models/#optimade.models.optimade_json.Provider.prefix","text":"database-provider-specific prefix as found in Appendix 1.","title":"prefix"},{"location":"reference/models/#optimade.models.optimade_json.Relationship","text":"Similar to normal JSON API relationship, but with addition of OPTIONAL meta field for a resource","title":"Relationship"},{"location":"reference/models/#optimade.models.optimade_json.Relationship.data","text":"Resource linkage","title":"data"},{"location":"reference/models/#optimade.models.optimade_json.Relationship.links","text":"a links object containing at least one of the following: self, related","title":"links"},{"location":"reference/models/#optimade.models.optimade_json.Relationship.meta","text":"a meta object that contains non-standard meta-information about the relationship.","title":"meta"},{"location":"reference/models/#optimade.models.optimade_json.ResponseMeta","text":"A JSON API meta member that contains JSON API meta objects of non-standard meta-information. OPTIONAL additional information global to the query that is not specified in this document, MUST start with a database-provider-specific prefix.","title":"ResponseMeta"},{"location":"reference/models/#optimade.models.optimade_json.ResponseMeta.api_version","text":"a string containing the version of the API implementation, e.g. v0.9.5","title":"api_version"},{"location":"reference/models/#optimade.models.optimade_json.ResponseMeta.data_available","text":"an integer containing the total number of data objects available in the database","title":"data_available"},{"location":"reference/models/#optimade.models.optimade_json.ResponseMeta.data_returned","text":"an integer containing the number of data objects returned for the query.","title":"data_returned"},{"location":"reference/models/#optimade.models.optimade_json.ResponseMeta.implementation","text":"a dictionary describing the server implementation","title":"implementation"},{"location":"reference/models/#optimade.models.optimade_json.ResponseMeta.last_id","text":"a string containing the last ID returned","title":"last_id"},{"location":"reference/models/#optimade.models.optimade_json.ResponseMeta.more_data_available","text":"false if all data has been returned, and true if not.","title":"more_data_available"},{"location":"reference/models/#optimade.models.optimade_json.ResponseMeta.provider","text":"information on the database provider of the implementation.","title":"provider"},{"location":"reference/models/#optimade.models.optimade_json.ResponseMeta.query","text":"information on the query that was requested","title":"query"},{"location":"reference/models/#optimade.models.optimade_json.ResponseMeta.response_message","text":"response string from the server","title":"response_message"},{"location":"reference/models/#optimade.models.optimade_json.ResponseMeta.time_stamp","text":"a string containing the date and time at which the query was exexcuted","title":"time_stamp"},{"location":"reference/models/#optimade.models.optimade_json.ResponseMeta.warnings","text":"List of warning resource objects representing non-critical errors or warnings. A warning resource object is defined similarly to a JSON API error object, but MUST also include the field type, which MUST have the value \"warning\". The field detail MUST be present and SHOULD contain a non-critical message, e.g., reporting unrecognized search attributes or deprecated features. The field status, representing a HTTP response status code, MUST NOT be present for a warning resource object. This is an exclusive field for error resource objects.","title":"warnings"},{"location":"reference/models/#optimade.models.optimade_json.ResponseMetaQuery","text":"Information on the query that was requested.","title":"ResponseMetaQuery"},{"location":"reference/models/#optimade.models.optimade_json.ResponseMetaQuery.representation","text":"a string with the part of the URL that follows the base URL. Example: '/structures?'","title":"representation"},{"location":"reference/models/#optimade.models.optimade_json.Success","text":"errors are not allowed","title":"Success"},{"location":"reference/models/#optimade.models.optimade_json.Success.data","text":"Outputted Data","title":"data"},{"location":"reference/models/#optimade.models.optimade_json.Success.errors","text":"A list of unique errors","title":"errors"},{"location":"reference/models/#optimade.models.optimade_json.Success.included","text":"A list of unique included resources","title":"included"},{"location":"reference/models/#optimade.models.optimade_json.Success.jsonapi","text":"Information about the JSON API used","title":"jsonapi"},{"location":"reference/models/#optimade.models.optimade_json.Success.links","text":"Links associated with the primary data or errors","title":"links"},{"location":"reference/models/#optimade.models.optimade_json.Success.meta","text":"A meta object containing non-standard information","title":"meta"},{"location":"reference/models/#optimade.models.optimade_json.Success.either_data_meta_or_errors_must_be_set","text":"Overwriting the existing validation function, since 'errors' MUST NOT be set Source code in optimade/models/optimade_json.py 200 201 202 203 204 205 206 207 208 209 210 211 212 213 @root_validator ( pre = True ) def either_data_meta_or_errors_must_be_set ( cls , values ): \"\"\"Overwriting the existing validation function, since 'errors' MUST NOT be set\"\"\" required_fields = ( \"data\" , \"meta\" ) if not any ( values . get ( field ) for field in required_fields ): raise ValueError ( f \"At least one of { required_fields } MUST be specified in the top-level response\" ) # errors MUST be skipped if values . get ( \"errors\" , None ) is not None : raise ValueError ( f \"'errors' MUST be skipped for a successful response\" ) return values","title":"either_data_meta_or_errors_must_be_set()"},{"location":"reference/models/#optimade.models.optimade_json.Warnings","text":"OPTIMADE-specific warning class based on OPTIMADE-specific JSON API Error. From the specification: A warning resource object is defined similarly to a JSON API error object , but MUST also include the field type , which MUST have the value \"warning\" . The field detail MUST be present and SHOULD contain a non - critical message , e . g ., reporting unrecognized search attributes or deprecated features . Note : Must be named \"Warnings\" , since \"Warning\" is a built - in Python class .","title":"Warnings"},{"location":"reference/models/#optimade.models.optimade_json.Warnings.code","text":"an application-specific error code, expressed as a string value.","title":"code"},{"location":"reference/models/#optimade.models.optimade_json.Warnings.detail","text":"A human-readable explanation specific to this occurrence of the problem.","title":"detail"},{"location":"reference/models/#optimade.models.optimade_json.Warnings.id","text":"A unique identifier for this particular occurrence of the problem.","title":"id"},{"location":"reference/models/#optimade.models.optimade_json.Warnings.links","text":"A links object storing about","title":"links"},{"location":"reference/models/#optimade.models.optimade_json.Warnings.meta","text":"a meta object containing non-standard meta-information about the error.","title":"meta"},{"location":"reference/models/#optimade.models.optimade_json.Warnings.source","text":"An object containing references to the source of the error","title":"source"},{"location":"reference/models/#optimade.models.optimade_json.Warnings.status","text":"the HTTP status code applicable to this problem, expressed as a string value.","title":"status"},{"location":"reference/models/#optimade.models.optimade_json.Warnings.title","text":"A short, human-readable summary of the problem. It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.","title":"title"},{"location":"reference/models/#optimade.models.optimade_json.Warnings.type","text":"Warnings must be of type \"warning\"","title":"type"},{"location":"reference/models/#optimade.models.references","text":"","title":"references"},{"location":"reference/models/#optimade.models.references.Person","text":"","title":"Person"},{"location":"reference/models/#optimade.models.references.Person.firstname","text":"First name of the person.","title":"firstname"},{"location":"reference/models/#optimade.models.references.Person.lastname","text":"Last name of the person.","title":"lastname"},{"location":"reference/models/#optimade.models.references.ReferenceResource","text":"The :entry: references entries describe bibliographic references. The following properties are used to provide the bibliographic details: address , annote , booktitle , chapter , crossref , edition , howpublished , institution , journal , key , month , note , number , organization , pages , publisher , school , series , title , type , volume , year : Meanings of these properties match the BibTeX specification <http://bibtexml.sourceforge.net/btxdoc.pdf> __, values are strings; authors and editors : lists of person objects which are dictionaries with the following keys: name : Full name of the person, REQUIRED. firstname , lastname : Parts of the person's name, OPTIONAL. doi and url : values are strings. Requirements/Conventions : Support : OPTIONAL, i.e., any of the properties MAY be :val: null . Query : Support for queries on any of these properties is OPTIONAL. If supported, filters MAY support only a subset of comparison operators. Every references entry MUST contain at least one of the properties.","title":"ReferenceResource"},{"location":"reference/models/#optimade.models.references.ReferenceResource.id","text":"An entry's ID as defined in section Definition of Terms _. - Type : string. - Requirements/Conventions : Support : REQUIRED, MUST NOT be :val: null . Query : MUST be a queryable property with support for all mandatory filter features. Response : REQUIRED in the response. See section Definition of Terms _. Examples : :val: \"db/1234567\" :val: \"cod/2000000\" :val: \"cod/2000000@1234567\" :val: \"nomad/L1234567890\" :val: \"42\"","title":"id"},{"location":"reference/models/#optimade.models.references.ReferenceResource.links","text":"a links object containing links related to the resource.","title":"links"},{"location":"reference/models/#optimade.models.references.ReferenceResource.meta","text":"a meta object containing non-standard meta-information about a resource that can not be represented as an attribute or relationship.","title":"meta"},{"location":"reference/models/#optimade.models.references.ReferenceResource.relationships","text":"a dictionary containing references to other entries according to the description in section Relationships _ encoded as JSON API Relationships <https://jsonapi.org/format/1.0/#document-resource-object-relationships> __. The OPTIONAL human-readable description of the relationship MAY be provided in the :field: description field inside the :field: meta dictionary.","title":"relationships"},{"location":"reference/models/#optimade.models.references.ReferenceResource.type","text":"The name of the type of an entry. Any entry MUST be able to be fetched using the base URL <Base URL_> _ type and ID at the url :endpoint: <base URL>/<type>/<id> . - Type : string. - Requirements/Conventions : Support : REQUIRED, MUST NOT be :val: null . Query : MUST be a queryable property with support for all mandatory filter features. Response : REQUIRED in the response. MUST be an existing entry type. The entry of type <type> and ID <id> MUST be returned in response to a request for :endpoint: /<type>/<id> under the versioned base URL. Example : :val: \"structures\"","title":"type"},{"location":"reference/models/#optimade.models.references.ReferenceResourceAttributes","text":"Model that stores the attributes of a reference. Many properties match the meaning described in the BibTeX specification .","title":"ReferenceResourceAttributes"},{"location":"reference/models/#optimade.models.references.ReferenceResourceAttributes.address","text":"Meaning of property matches the BiBTeX specification.","title":"address"},{"location":"reference/models/#optimade.models.references.ReferenceResourceAttributes.annote","text":"Meaning of property matches the BiBTeX specification.","title":"annote"},{"location":"reference/models/#optimade.models.references.ReferenceResourceAttributes.authors","text":"List of person objects containing the authors of the reference.","title":"authors"},{"location":"reference/models/#optimade.models.references.ReferenceResourceAttributes.bib_type","text":"Type of the reference, corresponding to the type property in the BiBTeX specification.","title":"bib_type"},{"location":"reference/models/#optimade.models.references.ReferenceResourceAttributes.booktitle","text":"Meaning of property matches the BiBTeX specification.","title":"booktitle"},{"location":"reference/models/#optimade.models.references.ReferenceResourceAttributes.chapter","text":"Meaning of property matches the BiBTeX specification.","title":"chapter"},{"location":"reference/models/#optimade.models.references.ReferenceResourceAttributes.crossref","text":"Meaning of property matches the BiBTeX specification.","title":"crossref"},{"location":"reference/models/#optimade.models.references.ReferenceResourceAttributes.doi","text":"The digital object identifier of the reference.","title":"doi"},{"location":"reference/models/#optimade.models.references.ReferenceResourceAttributes.edition","text":"Meaning of property matches the BiBTeX specification.","title":"edition"},{"location":"reference/models/#optimade.models.references.ReferenceResourceAttributes.editors","text":"List of person objects containing the editors of the reference.","title":"editors"},{"location":"reference/models/#optimade.models.references.ReferenceResourceAttributes.howpublished","text":"Meaning of property matches the BiBTeX specification.","title":"howpublished"},{"location":"reference/models/#optimade.models.references.ReferenceResourceAttributes.immutable_id","text":"The entry's immutable ID (e.g., an UUID). This is important for databases having preferred IDs that point to \"the latest version\" of a record, but still offer access to older variants. This ID maps to the version-specific record, in case it changes in the future. - Type : string. - Requirements/Conventions : Support : OPTIONAL, i.e., MAY be :val: null . Query : MUST be a queryable property with support for all mandatory filter features. Examples : :val: \"8bd3e750-b477-41a0-9b11-3a799f21b44f\" :val: \"fjeiwoj,54;@=%<>#32\" (Strings that are not URL-safe are allowed.)","title":"immutable_id"},{"location":"reference/models/#optimade.models.references.ReferenceResourceAttributes.institution","text":"Meaning of property matches the BiBTeX specification.","title":"institution"},{"location":"reference/models/#optimade.models.references.ReferenceResourceAttributes.journal","text":"Meaning of property matches the BiBTeX specification.","title":"journal"},{"location":"reference/models/#optimade.models.references.ReferenceResourceAttributes.key","text":"Meaning of property matches the BiBTeX specification.","title":"key"},{"location":"reference/models/#optimade.models.references.ReferenceResourceAttributes.last_modified","text":"Date and time representing when the entry was last modified. - Type : timestamp. - Requirements/Conventions : Support : SHOULD be supported, i.e., SHOULD NOT be :val: null . Is REQUIRED in this implementation, i.e., MUST NOT be :val: null . Query : MUST be a queryable property with support for all mandatory filter features. Response : REQUIRED in the response unless the query parameter :query-param: response_fields is present and does not include this property. Example : As part of JSON response format: :VAL: \"2007-04-05T14:30Z\" (i.e., encoded as an RFC 3339 Internet Date/Time Format <https://tools.ietf.org/html/rfc3339#section-5.6> __ string.)","title":"last_modified"},{"location":"reference/models/#optimade.models.references.ReferenceResourceAttributes.month","text":"Meaning of property matches the BiBTeX specification.","title":"month"},{"location":"reference/models/#optimade.models.references.ReferenceResourceAttributes.note","text":"Meaning of property matches the BiBTeX specification.","title":"note"},{"location":"reference/models/#optimade.models.references.ReferenceResourceAttributes.number","text":"Meaning of property matches the BiBTeX specification.","title":"number"},{"location":"reference/models/#optimade.models.references.ReferenceResourceAttributes.organization","text":"Meaning of property matches the BiBTeX specification.","title":"organization"},{"location":"reference/models/#optimade.models.references.ReferenceResourceAttributes.pages","text":"Meaning of property matches the BiBTeX specification.","title":"pages"},{"location":"reference/models/#optimade.models.references.ReferenceResourceAttributes.publisher","text":"Meaning of property matches the BiBTeX specification.","title":"publisher"},{"location":"reference/models/#optimade.models.references.ReferenceResourceAttributes.school","text":"Meaning of property matches the BiBTeX specification.","title":"school"},{"location":"reference/models/#optimade.models.references.ReferenceResourceAttributes.series","text":"Meaning of property matches the BiBTeX specification.","title":"series"},{"location":"reference/models/#optimade.models.references.ReferenceResourceAttributes.title","text":"Meaning of property matches the BiBTeX specification.","title":"title"},{"location":"reference/models/#optimade.models.references.ReferenceResourceAttributes.url","text":"The URL of the reference.","title":"url"},{"location":"reference/models/#optimade.models.references.ReferenceResourceAttributes.volume","text":"Meaning of property matches the BiBTeX specification.","title":"volume"},{"location":"reference/models/#optimade.models.references.ReferenceResourceAttributes.year","text":"Meaning of property matches the BiBTeX specification.","title":"year"},{"location":"reference/models/#optimade.models.responses","text":"","title":"responses"},{"location":"reference/models/#optimade.models.responses.EntryInfoResponse","text":"","title":"EntryInfoResponse"},{"location":"reference/models/#optimade.models.responses.EntryInfoResponse.data","text":"OPTIMADE information for an entry endpoint","title":"data"},{"location":"reference/models/#optimade.models.responses.EntryInfoResponse.errors","text":"A list of unique errors","title":"errors"},{"location":"reference/models/#optimade.models.responses.EntryInfoResponse.included","text":"A list of unique included resources","title":"included"},{"location":"reference/models/#optimade.models.responses.EntryInfoResponse.jsonapi","text":"Information about the JSON API used","title":"jsonapi"},{"location":"reference/models/#optimade.models.responses.EntryInfoResponse.links","text":"Links associated with the primary data or errors","title":"links"},{"location":"reference/models/#optimade.models.responses.EntryInfoResponse.meta","text":"A meta object containing non-standard information","title":"meta"},{"location":"reference/models/#optimade.models.responses.EntryResponseMany","text":"","title":"EntryResponseMany"},{"location":"reference/models/#optimade.models.responses.EntryResponseMany.errors","text":"A list of unique errors","title":"errors"},{"location":"reference/models/#optimade.models.responses.EntryResponseMany.jsonapi","text":"Information about the JSON API used","title":"jsonapi"},{"location":"reference/models/#optimade.models.responses.EntryResponseMany.links","text":"Links associated with the primary data or errors","title":"links"},{"location":"reference/models/#optimade.models.responses.EntryResponseMany.meta","text":"A meta object containing non-standard information","title":"meta"},{"location":"reference/models/#optimade.models.responses.EntryResponseOne","text":"","title":"EntryResponseOne"},{"location":"reference/models/#optimade.models.responses.EntryResponseOne.errors","text":"A list of unique errors","title":"errors"},{"location":"reference/models/#optimade.models.responses.EntryResponseOne.jsonapi","text":"Information about the JSON API used","title":"jsonapi"},{"location":"reference/models/#optimade.models.responses.EntryResponseOne.links","text":"Links associated with the primary data or errors","title":"links"},{"location":"reference/models/#optimade.models.responses.EntryResponseOne.meta","text":"A meta object containing non-standard information","title":"meta"},{"location":"reference/models/#optimade.models.responses.ErrorResponse","text":"errors MUST be present and data MUST be skipped","title":"ErrorResponse"},{"location":"reference/models/#optimade.models.responses.ErrorResponse.data","text":"Outputted Data","title":"data"},{"location":"reference/models/#optimade.models.responses.ErrorResponse.errors","text":"A list of OPTIMADE-specific JSON API error objects, where the field detail MUST be present.","title":"errors"},{"location":"reference/models/#optimade.models.responses.ErrorResponse.included","text":"A list of unique included resources","title":"included"},{"location":"reference/models/#optimade.models.responses.ErrorResponse.jsonapi","text":"Information about the JSON API used","title":"jsonapi"},{"location":"reference/models/#optimade.models.responses.ErrorResponse.links","text":"Links associated with the primary data or errors","title":"links"},{"location":"reference/models/#optimade.models.responses.ErrorResponse.meta","text":"A meta object containing non-standard information","title":"meta"},{"location":"reference/models/#optimade.models.responses.IndexInfoResponse","text":"","title":"IndexInfoResponse"},{"location":"reference/models/#optimade.models.responses.IndexInfoResponse.data","text":"Index meta-database /info data","title":"data"},{"location":"reference/models/#optimade.models.responses.IndexInfoResponse.errors","text":"A list of unique errors","title":"errors"},{"location":"reference/models/#optimade.models.responses.IndexInfoResponse.included","text":"A list of unique included resources","title":"included"},{"location":"reference/models/#optimade.models.responses.IndexInfoResponse.jsonapi","text":"Information about the JSON API used","title":"jsonapi"},{"location":"reference/models/#optimade.models.responses.IndexInfoResponse.links","text":"Links associated with the primary data or errors","title":"links"},{"location":"reference/models/#optimade.models.responses.IndexInfoResponse.meta","text":"A meta object containing non-standard information","title":"meta"},{"location":"reference/models/#optimade.models.responses.InfoResponse","text":"","title":"InfoResponse"},{"location":"reference/models/#optimade.models.responses.InfoResponse.data","text":"The implementations /info data","title":"data"},{"location":"reference/models/#optimade.models.responses.InfoResponse.errors","text":"A list of unique errors","title":"errors"},{"location":"reference/models/#optimade.models.responses.InfoResponse.included","text":"A list of unique included resources","title":"included"},{"location":"reference/models/#optimade.models.responses.InfoResponse.jsonapi","text":"Information about the JSON API used","title":"jsonapi"},{"location":"reference/models/#optimade.models.responses.InfoResponse.links","text":"Links associated with the primary data or errors","title":"links"},{"location":"reference/models/#optimade.models.responses.InfoResponse.meta","text":"A meta object containing non-standard information","title":"meta"},{"location":"reference/models/#optimade.models.responses.LinksResponse","text":"","title":"LinksResponse"},{"location":"reference/models/#optimade.models.responses.LinksResponse.data","text":"List of unique OPTIMADE links resource objects","title":"data"},{"location":"reference/models/#optimade.models.responses.LinksResponse.errors","text":"A list of unique errors","title":"errors"},{"location":"reference/models/#optimade.models.responses.LinksResponse.jsonapi","text":"Information about the JSON API used","title":"jsonapi"},{"location":"reference/models/#optimade.models.responses.LinksResponse.links","text":"Links associated with the primary data or errors","title":"links"},{"location":"reference/models/#optimade.models.responses.LinksResponse.meta","text":"A meta object containing non-standard information","title":"meta"},{"location":"reference/models/#optimade.models.responses.ReferenceResponseMany","text":"","title":"ReferenceResponseMany"},{"location":"reference/models/#optimade.models.responses.ReferenceResponseMany.data","text":"List of unique OPTIMADE references entry resource objects","title":"data"},{"location":"reference/models/#optimade.models.responses.ReferenceResponseMany.errors","text":"A list of unique errors","title":"errors"},{"location":"reference/models/#optimade.models.responses.ReferenceResponseMany.jsonapi","text":"Information about the JSON API used","title":"jsonapi"},{"location":"reference/models/#optimade.models.responses.ReferenceResponseMany.links","text":"Links associated with the primary data or errors","title":"links"},{"location":"reference/models/#optimade.models.responses.ReferenceResponseMany.meta","text":"A meta object containing non-standard information","title":"meta"},{"location":"reference/models/#optimade.models.responses.ReferenceResponseOne","text":"","title":"ReferenceResponseOne"},{"location":"reference/models/#optimade.models.responses.ReferenceResponseOne.data","text":"A single references entry resource","title":"data"},{"location":"reference/models/#optimade.models.responses.ReferenceResponseOne.errors","text":"A list of unique errors","title":"errors"},{"location":"reference/models/#optimade.models.responses.ReferenceResponseOne.jsonapi","text":"Information about the JSON API used","title":"jsonapi"},{"location":"reference/models/#optimade.models.responses.ReferenceResponseOne.links","text":"Links associated with the primary data or errors","title":"links"},{"location":"reference/models/#optimade.models.responses.ReferenceResponseOne.meta","text":"A meta object containing non-standard information","title":"meta"},{"location":"reference/models/#optimade.models.responses.StructureResponseMany","text":"","title":"StructureResponseMany"},{"location":"reference/models/#optimade.models.responses.StructureResponseMany.data","text":"List of unique OPTIMADE structures entry resource objects","title":"data"},{"location":"reference/models/#optimade.models.responses.StructureResponseMany.errors","text":"A list of unique errors","title":"errors"},{"location":"reference/models/#optimade.models.responses.StructureResponseMany.jsonapi","text":"Information about the JSON API used","title":"jsonapi"},{"location":"reference/models/#optimade.models.responses.StructureResponseMany.links","text":"Links associated with the primary data or errors","title":"links"},{"location":"reference/models/#optimade.models.responses.StructureResponseMany.meta","text":"A meta object containing non-standard information","title":"meta"},{"location":"reference/models/#optimade.models.responses.StructureResponseOne","text":"","title":"StructureResponseOne"},{"location":"reference/models/#optimade.models.responses.StructureResponseOne.data","text":"A single structures entry resource","title":"data"},{"location":"reference/models/#optimade.models.responses.StructureResponseOne.errors","text":"A list of unique errors","title":"errors"},{"location":"reference/models/#optimade.models.responses.StructureResponseOne.jsonapi","text":"Information about the JSON API used","title":"jsonapi"},{"location":"reference/models/#optimade.models.responses.StructureResponseOne.links","text":"Links associated with the primary data or errors","title":"links"},{"location":"reference/models/#optimade.models.responses.StructureResponseOne.meta","text":"A meta object containing non-standard information","title":"meta"},{"location":"reference/models/#optimade.models.structures","text":"","title":"structures"},{"location":"reference/models/#optimade.models.structures.Assembly","text":"A description of groups of sites that are statistically correlated. - ** Examples ** ( for each entry of the assemblies list ): - : val : ` { \"sites_in_groups\": [ [ 0 ] , [ 1 ] ], \" group_probabilities : [ 0.3 , 0.7 ] } ` : the first site and the second site never occur at the same time in the unit cell . Statistically , 30 % of the times the first site is present , while 70 % of the times the second site is present . - : val : ` { \"sites_in_groups\": [ [ 1 , 2 ] , [ 3 ] ], \" group_probabilities : [ 0.3 , 0.7 ] } ` : the second and third site are either present together or not present ; they form the first group of atoms for this assembly . The second group is formed by the fourth site . Sites of the first group ( the second and the third ) are never present at the same time as the fourth site . 30 % of times sites 1 and 2 are present ( and site 3 is absent ); 70 % of times site 3 is present ( and sites 1 and 2 are absent ).","title":"Assembly"},{"location":"reference/models/#optimade.models.structures.Assembly.group_probabilities","text":"Statistical probability of each group. It MUST have the same length as :property: sites_in_groups . It SHOULD sum to one. See below for examples of how to specify the probability of the occurrence of a vacancy. The possible reasons for the values not to sum to one are the same as already specified above for the :property: concentration of each :property: species , see property species _.","title":"group_probabilities"},{"location":"reference/models/#optimade.models.structures.Assembly.sites_in_groups","text":"Index of the sites (0-based) that belong to each group for each assembly. Example: :val: [[1], [2]] : two groups, one with the second site, one with the third. Example: :val: [[1,2], [3]] : one group with the second and third site, one with the fourth.","title":"sites_in_groups"},{"location":"reference/models/#optimade.models.structures.Periodicity","text":"An enumeration.","title":"Periodicity"},{"location":"reference/models/#optimade.models.structures.Species","text":"A list describing the species of the sites of this structure. Species can be pure chemical elements, or virtual-crystal atoms representing a statistical occupation of a given site by multiple chemical elements. - ** Examples ** : - : val : ` [ { \"name\" : \"Ti\" , \"chemical_symbols\" : [ \"Ti\" ], \"concentration\" : [ 1 . 0 ] } ] ` : any site with this species is occupied by a Ti atom . - : val : ` [ { \"name\" : \"Ti\" , \"chemical_symbols\" : [ \"Ti\" , \"vacancy\" ], \"concentration\" : [ 0 . 9 , 0 . 1 ] } ] ` : any site with this species is occupied by a Ti atom with 90 % probability , and has a vacancy with 10 % probability . - : val : ` [ { \"name\" : \"BaCa\" , \"chemical_symbols\" : [ \"vacancy\" , \"Ba\" , \"Ca\" ], \"concentration\" : [ 0 . 05 , 0 . 45 , 0 . 5 ], \"mass\" : 88 . 5 } ] ` : any site with this species is occupied by a Ba atom with 45 % probability , a Ca atom with 50 % probability , and by a vacancy with 5 % probability . The mass of this site is ( on average ) 88 . 5 a . m . u . - : val : ` [ { \"name\" : \"C12\" , \"chemical_symbols\" : [ \"C\" ], \"concentration\" : [ 1 . 0 ], \"mass\" : 12 . 0 } ] ` : any site with this species is occupied by a carbon isotope with mass 12 . - : val : ` [ { \"name\" : \"C13\" , \"chemical_symbols\" : [ \"C\" ], \"concentration\" : [ 1 . 0 ], \"mass\" : 13 . 0 } ] ` : any site with this species is occupied by a carbon isotope with mass 13 .","title":"Species"},{"location":"reference/models/#optimade.models.structures.Species.chemical_symbols","text":"MUST be a list of strings of all chemical elements composing this species. It MUST be one of the following: a valid chemical-element name, or the special value :val: \"X\" to represent a non-chemical element, or the special value :val: \"vacancy\" to represent that this site has a non-zero probability of having a vacancy (the respective probability is indicated in the :property: concentration list, see below). If any one entry in the :property: species list has a :property: chemical_symbols list that is longer than 1 element, the correct flag MUST be set in the list :property: structure_features (see property structure_features _).","title":"chemical_symbols"},{"location":"reference/models/#optimade.models.structures.Species.concentration","text":"MUST be a list of floats, with same length as :property: chemical_symbols . The numbers represent the relative concentration of the corresponding chemical symbol in this species. The numbers SHOULD sum to one. Cases in which the numbers do not sum to one typically fall only in the following two categories: Numerical errors when representing float numbers in fixed precision, e.g. for two chemical symbols with concentrations :val: 1/3 and :val: 2/3 , the concentration might look something like :val: [0.33333333333, 0.66666666666] . If the client is aware that the sum is not one because of numerical precision, it can renormalize the values so that the sum is exactly one. Experimental errors in the data present in the database. In this case, it is the responsibility of the client to decide how to process the data. Note that concentrations are uncorrelated between different site (even of the same species).","title":"concentration"},{"location":"reference/models/#optimade.models.structures.Species.mass","text":"If present MUST be a float expressed in a.m.u.","title":"mass"},{"location":"reference/models/#optimade.models.structures.Species.original_name","text":"Can be any valid Unicode string, and SHOULD contain (if specified) the name of the species that is used internally in the source database. Note: With regards to \"source database\", we refer to the immediate source being queried via the OPTIMADE API implementation. The main use of this field is for source databases that use species names, containing characters that are not allowed (see description of the list property species_at_sites _).","title":"original_name"},{"location":"reference/models/#optimade.models.structures.StructureResource","text":"Representing a structure.","title":"StructureResource"},{"location":"reference/models/#optimade.models.structures.StructureResource.id","text":"An entry's ID as defined in section Definition of Terms _. - Type : string. - Requirements/Conventions : Support : REQUIRED, MUST NOT be :val: null . Query : MUST be a queryable property with support for all mandatory filter features. Response : REQUIRED in the response. See section Definition of Terms _. Examples : :val: \"db/1234567\" :val: \"cod/2000000\" :val: \"cod/2000000@1234567\" :val: \"nomad/L1234567890\" :val: \"42\"","title":"id"},{"location":"reference/models/#optimade.models.structures.StructureResource.links","text":"a links object containing links related to the resource.","title":"links"},{"location":"reference/models/#optimade.models.structures.StructureResource.meta","text":"a meta object containing non-standard meta-information about a resource that can not be represented as an attribute or relationship.","title":"meta"},{"location":"reference/models/#optimade.models.structures.StructureResource.relationships","text":"a dictionary containing references to other entries according to the description in section Relationships _ encoded as JSON API Relationships <https://jsonapi.org/format/1.0/#document-resource-object-relationships> __. The OPTIONAL human-readable description of the relationship MAY be provided in the :field: description field inside the :field: meta dictionary.","title":"relationships"},{"location":"reference/models/#optimade.models.structures.StructureResource.type","text":"The name of the type of an entry. Any entry MUST be able to be fetched using the base URL <Base URL_> _ type and ID at the url :endpoint: <base URL>/<type>/<id> . - Type : string. - Requirements/Conventions : Support : REQUIRED, MUST NOT be :val: null . Query : MUST be a queryable property with support for all mandatory filter features. Response : REQUIRED in the response. MUST be an existing entry type. The entry of type <type> and ID <id> MUST be returned in response to a request for :endpoint: /<type>/<id> under the versioned base URL. Example : :val: \"structures\"","title":"type"},{"location":"reference/models/#optimade.models.structures.StructureResourceAttributes","text":"This class contains the Field for the attributes used to represent a structure, e.g. unit cell, atoms, positions.","title":"StructureResourceAttributes"},{"location":"reference/models/#optimade.models.structures.StructureResourceAttributes.assemblies","text":"A description of groups of sites that are statistically correlated. - Type : list of dictionary with keys: :property: sites_in_groups : list of list of integers (REQUIRED) :property: group_probabilities : list of floats (REQUIRED) Requirements/Conventions : Support : OPTIONAL support in implementations, i.e., MAY be :val: null . Query : Support for queries on this property is OPTIONAL. If supported, filters MAY support only a subset of comparison operators. If present, the correct flag MUST be set in the list :property: structure_features (see property structure_features _). Client implementations MUST check its presence (as its presence changes the interpretation of the structure). If present, it MUST be a list of dictionaries, each of which represents an assembly and MUST have the following two keys: sites_in_groups : Index of the sites (0-based) that belong to each group for each assembly. Example: :val: [[1], [2]] : two groups, one with the second site, one with the third. Example: :val: [[1,2], [3]] : one group with the second and third site, one with the fourth. group_probabilities : Statistical probability of each group. It MUST have the same length as :property: sites_in_groups . It SHOULD sum to one. See below for examples of how to specify the probability of the occurrence of a vacancy. The possible reasons for the values not to sum to one are the same as already specified above for the :property: concentration of each :property: species , see property species _. If a site is not present in any group, it means that it is present with 100 % probability (as if no assembly was specified). A site MUST NOT appear in more than one group. Examples (for each entry of the assemblies list): :val: {\"sites_in_groups\": [[0], [1]], \"group_probabilities: [0.3, 0.7]} : the first site and the second site never occur at the same time in the unit cell. Statistically, 30 % of the times the first site is present, while 70 % of the times the second site is present. :val: {\"sites_in_groups\": [[1,2], [3]], \"group_probabilities: [0.3, 0.7]} : the second and third site are either present together or not present; they form the first group of atoms for this assembly. The second group is formed by the fourth site. Sites of the first group (the second and the third) are never present at the same time as the fourth site. 30 % of times sites 1 and 2 are present (and site 3 is absent); 70 % of times site 3 is present (and sites 1 and 2 are absent). Notes : Assemblies are essential to represent, for instance, the situation where an atom can statistically occupy two different positions (sites). By defining groups, it is possible to represent, e.g., the case where a functional molecule (and not just one atom) is either present or absent (or the case where it it is present in two conformations) Considerations on virtual alloys and on vacancies: In the special case of a virtual alloy, these specifications allow two different, equivalent ways of specifying them. For instance, for a site at the origin with 30 % probability of being occupied by Si, 50 % probability of being occupied by Ge, and 20 % of being a vacancy, the following two representations are possible: Using a single species: .. code:: jsonc { \"cartesian_site_positions\": [[0,0,0]], \"species_at_sites\": [\"SiGe-vac\"], \"species\": [ { \"name\": \"SiGe-vac\", \"chemical_symbols\": [\"Si\", \"Ge\", \"vacancy\"], \"concentration\": [0.3, 0.5, 0.2] } ] // ... } Using multiple species and the assemblies: .. code:: jsonc { \"cartesian_site_positions\": [ [0,0,0], [0,0,0], [0,0,0] ], \"species_at_sites\": [\"Si\", \"Ge\", \"vac\"], \"species\": { \"Si\": { \"chemical_symbols\": [\"Si\"], \"concentration\": [1.0] }, \"Ge\": { \"chemical_symbols\": [\"Ge\"], \"concentration\": [1.0] }, \"vac\": { \"chemical_symbols\": [\"vacancy\"], \"concentration\": [1.0] } }, \"assemblies\": [ { \"sites_in_groups\": [ [0], [1], [2] ], \"group_probabilities\": [0.3, 0.5, 0.2] } ] // ... } It is up to the database provider to decide which representation to use, typically depending on the internal format in which the structure is stored. However, given a structure identified by a unique ID, the API implementation MUST always provide the same representation for it. The probabilities of occurrence of different assemblies are uncorrelated. So, for instance in the following case with two assemblies: .. code:: jsonc { \"assemblies\": [ { \"sites_in_groups\": [ [0], [1] ], \"group_probabilities\": [0.2, 0.8], }, { \"sites_in_groups\": [ [2], [3] ], \"group_probabilities\": [0.3, 0.7] } ] } Site 0 is present with a probability of 20 % and site 1 with a probability of 80 %. These two sites are correlated (either site 0 or 1 is present). Similarly, site 2 is present with a probability of 30 % and site 3 with a probability of 70 %. These two sites are correlated (either site 2 or 3 is present). However, the presence or absence of sites 0 and 1 is not correlated with the presence or absence of sites 2 and 3 (in the specific example, the pair of sites (0, 2) can occur with 0.2 0.3 = 6 % probability; the pair (0, 3) with 0.2 0.7 = 14 % probability; the pair (1, 2) with 0.8 0.3 = 24 % probability; and the pair (1, 3) with 0.8 0.7 = 56 % probability).","title":"assemblies"},{"location":"reference/models/#optimade.models.structures.StructureResourceAttributes.cartesian_site_positions","text":"Cartesian positions of each site. A site is an atom, a site potentially occupied by an atom, or a placeholder for a virtual mixture of atoms (e.g., in a virtual crystal approximation). - Type : list of list of floats and/or unknown values - Requirements/Conventions : Support : SHOULD be supported, i.e., SHOULD NOT be :val: null . Is REQUIRED in this implementation, i.e., MUST NOT be :val: null . Query : Support for queries on this property is OPTIONAL. If supported, filters MAY support only a subset of comparison operators. It MUST be a list of length N times 3, where N is the number of sites in the structure. An entry MAY have multiple sites at the same Cartesian position (for a relevant use of this, see e.g., the property assemblies _). If a component of the position is unknown, the :val: null value should be provided instead (see section Properties with unknown value ). Otherwise, it should be a float value, expressed in angstrom (\u00c5). If at least one of the coordinates is unknown, the correct flag in the list property structure_features MUST be set. Notes : (for implementers) While this is unrelated to this OPTIMADE specification: If you decide to store internally the :property: cartesian_site_positions as a float array, you might want to represent :val: null values with :field-val: NaN values. The latter being valid float numbers in the IEEE 754 standard in IEEE 754-1985 <https://doi.org/10.1109/IEEESTD.1985.82928> and in the updated version IEEE 754-2008 <https://doi.org/10.1109/IEEESTD.2008.4610935> . Examples : :val: [[0,0,0],[0,0,2]] indicates a structure with two sites, one sitting at the origin and one along the (positive) z -axis, 2 \u00c5 away from the origin.","title":"cartesian_site_positions"},{"location":"reference/models/#optimade.models.structures.StructureResourceAttributes.chemical_formula_anonymous","text":"The anonymous formula is the :property: chemical_formula_reduced , but where the elements are instead first ordered by their chemical proportion number, and then, in order left to right, replaced by anonymous symbols A, B, C, ..., Z, Aa, Ba, ..., Za, Ab, Bb, ... and so on. - Type : string - Requirements/Conventions : Support : SHOULD be supported, i.e., SHOULD NOT be :val: null . Is REQUIRED in this implementation, i.e., MUST NOT be :val: null . Query : MUST be a queryable property. However, support for filters using partial string matching with this property is OPTIONAL (i.e., BEGINS WITH, ENDS WITH, and CONTAINS). Examples : :val: \"A2B\" :val: \"A42B42C16D12E10F9G5\" Querying : A filter that matches an exactly given formula is :filter: chemical_formula_anonymous=\"A2B\" .","title":"chemical_formula_anonymous"},{"location":"reference/models/#optimade.models.structures.StructureResourceAttributes.chemical_formula_descriptive","text":"The chemical formula for a structure as a string in a form chosen by the API implementation. - Type : string - Requirements/Conventions : Support : SHOULD be supported, i.e., SHOULD NOT be :val: null . Is REQUIRED in this implementation, i.e., MUST NOT be :val: null . Query : MUST be a queryable property with support for all mandatory filter operators. The chemical formula is given as a string consisting of properly capitalized element symbols followed by integers or decimal numbers, balanced parentheses, square, and curly brackets ( , ) , [ , ] , { , } , commas, the + , - , : and = symbols. The parentheses are allowed to be followed by a number. Spaces are allowed anywhere except within chemical symbols. The order of elements and any groupings indicated by parentheses or brackets are chosen freely by the API implementation. The string SHOULD be arithmetically consistent with the element ratios in the :property: chemical_formula_reduced property. It is RECOMMENDED, but not mandatory, that symbols, parentheses and brackets, if used, are used with the meanings prescribed by IUPAC's Nomenclature of Organic Chemistry <https://www.qmul.ac.uk/sbcs/iupac/bibliog/blue.html> __. Examples : :val: \"(H2O)2 Na\" :val: \"NaCl\" :val: \"CaCO3\" :val: \"CCaO3\" :val: \"(CH3)3N+ - [CH2]2-OH = Me3N+ - CH2 - CH2OH\" Query examples : Note: the free-form nature of this property is likely to make queries on it across different databases inconsistent. A filter that matches an exactly given formula: :filter: chemical_formula_descriptive=\"(H2O)2 Na\" . A filter that does a partial match: :filter: chemical_formula_descriptive CONTAINS \"H2O\" .","title":"chemical_formula_descriptive"},{"location":"reference/models/#optimade.models.structures.StructureResourceAttributes.chemical_formula_hill","text":"The chemical formula for a structure in Hill form <https://dx.doi.org/10.1021/ja02046a005> __ with element symbols followed by integer chemical proportion numbers. The proportion number MUST be omitted if it is 1. - Type : string - Requirements/Conventions : Support : OPTIONAL, i.e., MAY be :val: null . Query : Support for queries on these properties are OPTIONAL. If supported, only a subset of filter operators MAY be supported. The overall scale factor of the chemical proportions is chosen such that the resulting values are integers that indicate the most chemically relevant unit of which the system is composed. For example, if the structure is a repeating unit cell with four hydrogens and four oxygens that represents two hydroperoxide molecules, :property: chemical_formula_hill is :val: \"H2O2\" (i.e., not :val: \"HO\" , nor :val: \"H4O4\" ). If the chemical insight needed to ascribe a Hill formula to the system is not present, the property MUST be handled as unset. Element names MUST have proper capitalization (e.g., :val: \"Si\" , not :VAL: \"SI\" for \"silicon\"). Elements MUST be placed in Hill order <https://dx.doi.org/10.1021/ja02046a005> __, followed by their integer chemical proportion number. Hill order means: if carbon is present, it is placed first, and if also present, hydrogen is placed second. After that, all other elements are ordered alphabetically. If carbon is not present, all elements are ordered alphabetically. If the system has sites with partial occupation and the total occupations of each element do not all sum up to integers, then the Hill formula SHOULD be handled as unset. No spaces or separators are allowed. Examples : :val: \"H2O2\" Query examples : A filter that matches an exactly given formula is :filter: chemical_formula_hill=\"H2O2\" .","title":"chemical_formula_hill"},{"location":"reference/models/#optimade.models.structures.StructureResourceAttributes.chemical_formula_reduced","text":"The reduced chemical formula for a structure as a string with element symbols and integer chemical proportion numbers. The proportion number MUST be omitted if it is 1. - Type : string - Requirements/Conventions : Support : SHOULD be supported, i.e., SHOULD NOT be :val: null . Is REQUIRED in this implementation, i.e., MUST NOT be :val: null . Query : MUST be a queryable property. However, support for filters using partial string matching with this property is OPTIONAL (i.e., BEGINS WITH, ENDS WITH, and CONTAINS). Intricate querying on formula components are instead recommended to be formulated using set-type filter operators on the multi valued :property: elements and :property: elements_proportions properties. Element names MUST have proper capitalization (e.g., :val: \"Si\" , not :VAL: \"SI\" for \"silicon\"). Elements MUST be placed in alphabetical order, followed by their integer chemical proportion number. For structures with no partial occupation, the chemical proportion numbers are the smallest integers for which the chemical proportion is exactly correct. For structures with partial occupation, the chemical proportion numbers are integers that within reasonable approximation indicate the correct chemical proportions. The precise details of how to perform the rounding is chosen by the API implementation. No spaces or separators are allowed. Examples : :val: \"H2NaO\" :val: \"ClNa\" :val: \"CCaO3\" Query examples : A filter that matches an exactly given formula is :filter: chemical_formula_reduced=\"H2NaO\" .","title":"chemical_formula_reduced"},{"location":"reference/models/#optimade.models.structures.StructureResourceAttributes.dimension_types","text":"List of three integers. For each of the three directions indicated by the three lattice vectors (see property lattice_vectors ). This list indicates if the direction is periodic (value :val: 1 ) or non-periodic (value :val: 0 ). Note: the elements in this list each refer to the direction of the corresponding entry in property lattice_vectors and not the Cartesian x, y, z directions. - Type : list of integers. - Requirements/Conventions : Support : SHOULD be supported, i.e., SHOULD NOT be :val: null . Is REQUIRED in this implementation, i.e., MUST NOT be :val: null . Query : MUST be a queryable property. Support for equality comparison is REQUIRED, support for other comparison operators are OPTIONAL. MUST be a list of length 3. Each integer element MUST assume only the value 0 or 1. Examples : For a molecule: :val: [0, 0, 0] For a wire along the direction specified by the third lattice vector: :val: [0, 0, 1] For a 2D surface/slab, periodic on the plane defined by the first and third lattice vectors: :val: [1, 0, 1] For a bulk 3D system: :val: [1, 1, 1]","title":"dimension_types"},{"location":"reference/models/#optimade.models.structures.StructureResourceAttributes.elements","text":"Names of the different elements present in the structure. - Type : list of strings. - Requirements/Conventions : Support : SHOULD be supported, i.e., SHOULD NOT be :val: null . Is REQUIRED in this implementation, i.e., MUST NOT be :val: null . Query : MUST be a queryable property with support for all mandatory filter operators. The strings are the chemical symbols, written as uppercase letter plus optional lowercase letters. The order MUST be alphabetical. Note: This may not contain the \"x\" that is suggested in chemical_symbols for the :property: species property. Examples : :val: [\"Si\"] :val: [\"Al\",\"O\",\"Si\"] Query examples : A filter that matches all records of structures that contain Si, Al and O, and possibly other elements: :filter: elements HAS ALL \"Si\", \"Al\", \"O\" . To match structures with exactly these three elements, use :filter: elements HAS ALL \"Si\", \"Al\", \"O\" AND LENGTH elements = 3 .","title":"elements"},{"location":"reference/models/#optimade.models.structures.StructureResourceAttributes.elements_ratios","text":"Relative proportions of different elements in the structure. - Type : list of floats - Requirements/Conventions : Support : SHOULD be supported, i.e., SHOULD NOT be :val: null . Is REQUIRED in this implementation, i.e., MUST NOT be :val: null . Query : MUST be a queryable property with support for all mandatory filter operators. Composed by the proportions of elements in the structure as a list of floating point numbers. The sum of the numbers MUST be 1.0 (within floating point accuracy) Examples : :val: [1.0] :val: [0.3333333333333333, 0.2222222222222222, 0.4444444444444444] Query examples : Note: useful filters can be formulated using the set operator syntax for correlated values. However, since the values are floating point values, the use of equality comparisons is generally not recommended. A filter that matches structures where approximately 1/3 of the atoms in the structure are the element Al is: :filter: elements:elements_ratios HAS ALL \"Al\":>0.3333, \"Al\":<0.3334 .","title":"elements_ratios"},{"location":"reference/models/#optimade.models.structures.StructureResourceAttributes.immutable_id","text":"The entry's immutable ID (e.g., an UUID). This is important for databases having preferred IDs that point to \"the latest version\" of a record, but still offer access to older variants. This ID maps to the version-specific record, in case it changes in the future. - Type : string. - Requirements/Conventions : Support : OPTIONAL, i.e., MAY be :val: null . Query : MUST be a queryable property with support for all mandatory filter features. Examples : :val: \"8bd3e750-b477-41a0-9b11-3a799f21b44f\" :val: \"fjeiwoj,54;@=%<>#32\" (Strings that are not URL-safe are allowed.)","title":"immutable_id"},{"location":"reference/models/#optimade.models.structures.StructureResourceAttributes.last_modified","text":"Date and time representing when the entry was last modified. - Type : timestamp. - Requirements/Conventions : Support : SHOULD be supported, i.e., SHOULD NOT be :val: null . Is REQUIRED in this implementation, i.e., MUST NOT be :val: null . Query : MUST be a queryable property with support for all mandatory filter features. Response : REQUIRED in the response unless the query parameter :query-param: response_fields is present and does not include this property. Example : As part of JSON response format: :VAL: \"2007-04-05T14:30Z\" (i.e., encoded as an RFC 3339 Internet Date/Time Format <https://tools.ietf.org/html/rfc3339#section-5.6> __ string.)","title":"last_modified"},{"location":"reference/models/#optimade.models.structures.StructureResourceAttributes.lattice_vectors","text":"The three lattice vectors in Cartesian coordinates, in \u00e5ngstr\u00f6m (\u00c5). - Type : list of list of floats. - Requirements/Conventions : Support : SHOULD be supported, i.e., SHOULD NOT be :val: null . Is REQUIRED in this implementation, i.e., MUST NOT be :val: null . Query : Support for queries on this property is OPTIONAL. If supported, filters MAY support only a subset of comparison operators. MUST be a list of three vectors a , b , and c , where each of the vectors MUST BE a list of the vector's coordinates along the x, y, and z Cartesian coordinates. (Therefore, the first index runs over the three lattice vectors and the second index runs over the x, y, z Cartesian coordinates). For databases that do not define an absolute Cartesian system (e.g., only defining the length and angles between vectors), the first lattice vector SHOULD be set along x and the second on the xy -plane. This property MUST be an array of dimensions 3 times 3 regardless of the elements of :property: dimension_types . The vectors SHOULD by convention be chosen so the determinant of the :property: lattice_vectors matrix is different from zero. The vectors in the non-periodic directions have no significance beyond fulfilling these requirements. All three elements of the inner lists of floats MAY be :val: null for non-periodic dimensions, i.e., those dimensions for which :property: dimension_types is :val: 0 . Examples : :val: [[4.0,0.0,0.0],[0.0,4.0,0.0],[0.0,1.0,4.0]] represents a cell, where the first vector is :val: (4, 0, 0) , i.e., a vector aligned along the :val: x axis of length 4 \u00c5; the second vector is :val: (0, 4, 0) ; and the third vector is :val: (0, 1, 4) .","title":"lattice_vectors"},{"location":"reference/models/#optimade.models.structures.StructureResourceAttributes.nelements","text":"Number of different elements in the structure as an integer. - Type : integer - Requirements/Conventions : Support : SHOULD be supported, i.e., SHOULD NOT be :val: null . Is REQUIRED in this implementation, i.e., MUST NOT be :val: null . Query : MUST be a queryable property with support for all mandatory filter operators. Example : :val: 3 Querying : Note: queries on this property can equivalently be formulated using :filter-fragment: LENGTH elements . A filter that matches structures that have exactly 4 elements: :filter: nelements=4 . A filter that matches structures that have between 2 and 7 elements: :filter: nelements>=2 AND nelements<=7 .","title":"nelements"},{"location":"reference/models/#optimade.models.structures.StructureResourceAttributes.nsites","text":"An integer specifying the length of the :property: cartesian_site_positions property. - Type : integer - Requirements/Conventions : Support : SHOULD be supported, i.e., SHOULD NOT be :val: null . Is REQUIRED in this implementation, i.e., MUST NOT be :val: null . Query : MUST be a queryable property with support for all mandatory filter operators. Examples : :val: 42 Query examples : Match only structures with exactly 4 sites: :filter: nsites=4 Match structures that have between 2 and 7 sites: :filter: nsites>=2 AND nsites<=7","title":"nsites"},{"location":"reference/models/#optimade.models.structures.StructureResourceAttributes.species","text":"A list describing the species of the sites of this structure. Species can be pure chemical elements, or virtual-crystal atoms representing a statistical occupation of a given site by multiple chemical elements. - Type : list of dictionary with keys: :property: name : string (REQUIRED) :property: chemical_symbols : list of strings (REQUIRED) :property: concentration : list of float (REQUIRED) :property: mass : float (OPTIONAL) :property: original_name : string (OPTIONAL). Requirements/Conventions : Support : SHOULD be supported, i.e., SHOULD NOT be :val: null . Is REQUIRED in this implementation, i.e., MUST NOT be :val: null . Query : Support for queries on this property is OPTIONAL. If supported, filters MAY support only a subset of comparison operators. Each list member MUST be a dictionary with the following keys: name : REQUIRED; gives the name of the species; the name value MUST be unique in the :property: species list; chemical_symbols : REQUIRED; MUST be a list of strings of all chemical elements composing this species. It MUST be one of the following: a valid chemical-element name, or the special value :val: \"X\" to represent a non-chemical element, or the special value :val: \"vacancy\" to represent that this site has a non-zero probability of having a vacancy (the respective probability is indicated in the :property: concentration list, see below). If any one entry in the :property: species list has a :property: chemical_symbols list that is longer than 1 element, the correct flag MUST be set in the list :property: structure_features (see property structure_features _). concentration : REQUIRED; MUST be a list of floats, with same length as :property: chemical_symbols . The numbers represent the relative concentration of the corresponding chemical symbol in this species. The numbers SHOULD sum to one. Cases in which the numbers do not sum to one typically fall only in the following two categories: Numerical errors when representing float numbers in fixed precision, e.g. for two chemical symbols with concentrations :val: 1/3 and :val: 2/3 , the concentration might look something like :val: [0.33333333333, 0.66666666666] . If the client is aware that the sum is not one because of numerical precision, it can renormalize the values so that the sum is exactly one. Experimental errors in the data present in the database. In this case, it is the responsibility of the client to decide how to process the data. Note that concentrations are uncorrelated between different site (even of the same species). mass : OPTIONAL. If present MUST be a float expressed in a.m.u. original_name : OPTIONAL. Can be any valid Unicode string, and SHOULD contain (if specified) the name of the species that is used internally in the source database. With regards to \"source database\", we refer to the immediate source being queried via the OPTIMADE API implementation. The main use of this field is for source databases that use species names, containing characters that are not allowed (see description of the list property species_at_sites _). For systems that have only species formed by a single chemical symbol, and that have at most one species per chemical symbol, SHOULD use the chemical symbol as species name (e.g., :val: \"Ti\" for titanium, :val: \"O\" for oxygen, etc.) However, note that this is OPTIONAL, and client implementations MUST NOT assume that the key corresponds to a chemical symbol, nor assume that if the species name is a valid chemical symbol, that it represents a species with that chemical symbol. This means that a species :val: {\"name\": \"C\", \"chemical_symbols\": [\"Ti\"], \"concentration\": [1.0]} is valid and represents a titanium species (and not a carbon species). It is NOT RECOMMENDED that a structure includes species that do not have at least one corresponding site. Examples : :val: [ {\"name\": \"Ti\", \"chemical_symbols\": [\"Ti\"], \"concentration\": [1.0]} ] : any site with this species is occupied by a Ti atom. :val: [ {\"name\": \"Ti\", \"chemical_symbols\": [\"Ti\", \"vacancy\"], \"concentration\": [0.9, 0.1]} ] : any site with this species is occupied by a Ti atom with 90 % probability, and has a vacancy with 10 % probability. :val: [ {\"name\": \"BaCa\", \"chemical_symbols\": [\"vacancy\", \"Ba\", \"Ca\"], \"concentration\": [0.05, 0.45, 0.5], \"mass\": 88.5} ] : any site with this species is occupied by a Ba atom with 45 % probability, a Ca atom with 50 % probability, and by a vacancy with 5 % probability. The mass of this site is (on average) 88.5 a.m.u. :val: [ {\"name\": \"C12\", \"chemical_symbols\": [\"C\"], \"concentration\": [1.0], \"mass\": 12.0} ] : any site with this species is occupied by a carbon isotope with mass 12. :val: [ {\"name\": \"C13\", \"chemical_symbols\": [\"C\"], \"concentration\": [1.0], \"mass\": 13.0} ] : any site with this species is occupied by a carbon isotope with mass 13.","title":"species"},{"location":"reference/models/#optimade.models.structures.StructureResourceAttributes.species_at_sites","text":"Name of the species at each site (where values for sites are specified with the same order of the property cartesian_site_positions ). The properties of the species are found in the property species . - Type : list of strings. - Requirements/Conventions : Support : SHOULD be supported, i.e., SHOULD NOT be :val: null . Is REQUIRED in this implementation, i.e., MUST NOT be :val: null . Query : Support for queries on this property is OPTIONAL. If supported, filters MAY support only a subset of comparison operators. MUST have length equal to the number of sites in the structure (first dimension of the list property cartesian_site_positions _). Each species MUST have a unique name. Each species name mentioned in the :property: species_at_sites list MUST be described in the list property species _ (i.e. for each value in the :property: species_at_sites list there MUST exist exactly one dictionary in the :property: species list with the :property: name attribute equal to the corresponding :property: species_at_sites value). Each site MUST be associated only to a single species. Note : However, species can represent mixtures of atoms, and multiple species MAY be defined for the same chemical element. This latter case is useful when different atoms of the same type need to be grouped or distinguished, for instance in simulation codes to assign different initial spin states. Examples : :val: [\"Ti\",\"O2\"] indicates that the first site is hosting a species labeled :val: \"Ti\" and the second a species labeled :val: \"O2\" .","title":"species_at_sites"},{"location":"reference/models/#optimade.models.structures.StructureResourceAttributes.structure_features","text":"A list of strings that flag which special features are used by the structure. - Type : list of strings - Requirements/Conventions : Support : REQUIRED, MUST NOT be :val: null . Query : MUST be a queryable property. Filters on the list MUST support all mandatory HAS-type queries. Filter operators for comparisons on the string components MUST support equality, support for other comparison operators are OPTIONAL. MUST be an empty list if no special features are used. MUST be sorted alphabetically. If a special feature listed below is used, the list MUST contain the corresponding string. If a special feature listed below is not used, the list MUST NOT contain the corresponding string. List of strings used to indicate special structure features : :val: disorder : This flag MUST be present if any one entry in the :property: species list has a :property: chemical_symbols list that is longer than 1 element. :val: unknown_positions : This flag MUST be present if at least one component of the :property: cartesian_site_positions list of lists has value :val: null . :val: assemblies : This flag MUST be present if the property assemblies _ is present. Examples : A structure having unknown positions and using assemblies: :val: [\"assemblies\", \"unknown_positions\"]","title":"structure_features"}]}